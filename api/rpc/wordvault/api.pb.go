// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: rpc/wordvault/api.proto

package wordvault

import (
	wordsearcher "github.com/domino14/word_db_server/api/rpc/wordsearcher"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Score int32

const (
	Score_SCORE_NONE  Score = 0
	Score_SCORE_AGAIN Score = 1
	Score_SCORE_HARD  Score = 2
	Score_SCORE_GOOD  Score = 3
	Score_SCORE_EASY  Score = 4
)

// Enum value maps for Score.
var (
	Score_name = map[int32]string{
		0: "SCORE_NONE",
		1: "SCORE_AGAIN",
		2: "SCORE_HARD",
		3: "SCORE_GOOD",
		4: "SCORE_EASY",
	}
	Score_value = map[string]int32{
		"SCORE_NONE":  0,
		"SCORE_AGAIN": 1,
		"SCORE_HARD":  2,
		"SCORE_GOOD":  3,
		"SCORE_EASY":  4,
	}
)

func (x Score) Enum() *Score {
	p := new(Score)
	*p = x
	return p
}

func (x Score) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Score) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_wordvault_api_proto_enumTypes[0].Descriptor()
}

func (Score) Type() protoreflect.EnumType {
	return &file_rpc_wordvault_api_proto_enumTypes[0]
}

func (x Score) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Score.Descriptor instead.
func (Score) EnumDescriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{0}
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon      string                  `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Alphagram    *wordsearcher.Alphagram `protobuf:"bytes,2,opt,name=alphagram,proto3" json:"alphagram,omitempty"`
	CardJsonRepr []byte                  `protobuf:"bytes,3,opt,name=card_json_repr,json=cardJsonRepr,proto3" json:"card_json_repr,omitempty"`
	// The retrievability of a card is not part of the json repr and is computed
	// as of the time of request.
	Retrievability float64 `protobuf:"fixed64,4,opt,name=retrievability,proto3" json:"retrievability,omitempty"`
	ReviewLog      []byte  `protobuf:"bytes,5,opt,name=review_log,json=reviewLog,proto3" json:"review_log,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *Card) GetAlphagram() *wordsearcher.Alphagram {
	if x != nil {
		return x.Alphagram
	}
	return nil
}

func (x *Card) GetCardJsonRepr() []byte {
	if x != nil {
		return x.CardJsonRepr
	}
	return nil
}

func (x *Card) GetRetrievability() float64 {
	if x != nil {
		return x.Retrievability
	}
	return 0
}

func (x *Card) GetReviewLog() []byte {
	if x != nil {
		return x.ReviewLog
	}
	return nil
}

type GetCardInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon    string   `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Alphagrams []string `protobuf:"bytes,2,rep,name=alphagrams,proto3" json:"alphagrams,omitempty"`
}

func (x *GetCardInfoRequest) Reset() {
	*x = GetCardInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardInfoRequest) ProtoMessage() {}

func (x *GetCardInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCardInfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetCardInfoRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *GetCardInfoRequest) GetAlphagrams() []string {
	if x != nil {
		return x.Alphagrams
	}
	return nil
}

type GetNextScheduledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Limit   uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetNextScheduledRequest) Reset() {
	*x = GetNextScheduledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextScheduledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextScheduledRequest) ProtoMessage() {}

func (x *GetNextScheduledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextScheduledRequest.ProtoReflect.Descriptor instead.
func (*GetNextScheduledRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetNextScheduledRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *GetNextScheduledRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSingleNextScheduledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
}

func (x *GetSingleNextScheduledRequest) Reset() {
	*x = GetSingleNextScheduledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleNextScheduledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleNextScheduledRequest) ProtoMessage() {}

func (x *GetSingleNextScheduledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleNextScheduledRequest.ProtoReflect.Descriptor instead.
func (*GetSingleNextScheduledRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetSingleNextScheduledRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

type GetSingleNextScheduledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card         *Card  `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	OverdueCount uint32 `protobuf:"varint,2,opt,name=overdue_count,json=overdueCount,proto3" json:"overdue_count,omitempty"`
}

func (x *GetSingleNextScheduledResponse) Reset() {
	*x = GetSingleNextScheduledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleNextScheduledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleNextScheduledResponse) ProtoMessage() {}

func (x *GetSingleNextScheduledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleNextScheduledResponse.ProtoReflect.Descriptor instead.
func (*GetSingleNextScheduledResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetSingleNextScheduledResponse) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *GetSingleNextScheduledResponse) GetOverdueCount() uint32 {
	if x != nil {
		return x.OverdueCount
	}
	return 0
}

type Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *Cards) Reset() {
	*x = Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cards) ProtoMessage() {}

func (x *Cards) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cards.ProtoReflect.Descriptor instead.
func (*Cards) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{5}
}

func (x *Cards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type ScoreCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     Score  `protobuf:"varint,1,opt,name=score,proto3,enum=wordvault.Score" json:"score,omitempty"`
	Lexicon   string `protobuf:"bytes,2,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Alphagram string `protobuf:"bytes,3,opt,name=alphagram,proto3" json:"alphagram,omitempty"`
}

func (x *ScoreCardRequest) Reset() {
	*x = ScoreCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreCardRequest) ProtoMessage() {}

func (x *ScoreCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreCardRequest.ProtoReflect.Descriptor instead.
func (*ScoreCardRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{6}
}

func (x *ScoreCardRequest) GetScore() Score {
	if x != nil {
		return x.Score
	}
	return Score_SCORE_NONE
}

func (x *ScoreCardRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *ScoreCardRequest) GetAlphagram() string {
	if x != nil {
		return x.Alphagram
	}
	return ""
}

type ScoreCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextScheduled *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=next_scheduled,json=nextScheduled,proto3" json:"next_scheduled,omitempty"`
	CardJsonRepr  []byte                 `protobuf:"bytes,2,opt,name=card_json_repr,json=cardJsonRepr,proto3" json:"card_json_repr,omitempty"`
}

func (x *ScoreCardResponse) Reset() {
	*x = ScoreCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreCardResponse) ProtoMessage() {}

func (x *ScoreCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreCardResponse.ProtoReflect.Descriptor instead.
func (*ScoreCardResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{7}
}

func (x *ScoreCardResponse) GetNextScheduled() *timestamppb.Timestamp {
	if x != nil {
		return x.NextScheduled
	}
	return nil
}

func (x *ScoreCardResponse) GetCardJsonRepr() []byte {
	if x != nil {
		return x.CardJsonRepr
	}
	return nil
}

type AddCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon    string   `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Alphagrams []string `protobuf:"bytes,2,rep,name=alphagrams,proto3" json:"alphagrams,omitempty"`
}

func (x *AddCardsRequest) Reset() {
	*x = AddCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardsRequest) ProtoMessage() {}

func (x *AddCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardsRequest.ProtoReflect.Descriptor instead.
func (*AddCardsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{8}
}

func (x *AddCardsRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *AddCardsRequest) GetAlphagrams() []string {
	if x != nil {
		return x.Alphagrams
	}
	return nil
}

type AddCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumCardsAdded uint32 `protobuf:"varint,1,opt,name=num_cards_added,json=numCardsAdded,proto3" json:"num_cards_added,omitempty"`
}

func (x *AddCardsResponse) Reset() {
	*x = AddCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardsResponse) ProtoMessage() {}

func (x *AddCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardsResponse.ProtoReflect.Descriptor instead.
func (*AddCardsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{9}
}

func (x *AddCardsResponse) GetNumCardsAdded() uint32 {
	if x != nil {
		return x.NumCardsAdded
	}
	return 0
}

type EditLastScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon      string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Alphagram    string `protobuf:"bytes,2,opt,name=alphagram,proto3" json:"alphagram,omitempty"`
	NewScore     Score  `protobuf:"varint,3,opt,name=new_score,json=newScore,proto3,enum=wordvault.Score" json:"new_score,omitempty"`
	LastCardRepr []byte `protobuf:"bytes,4,opt,name=last_card_repr,json=lastCardRepr,proto3" json:"last_card_repr,omitempty"`
}

func (x *EditLastScoreRequest) Reset() {
	*x = EditLastScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditLastScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditLastScoreRequest) ProtoMessage() {}

func (x *EditLastScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditLastScoreRequest.ProtoReflect.Descriptor instead.
func (*EditLastScoreRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{10}
}

func (x *EditLastScoreRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *EditLastScoreRequest) GetAlphagram() string {
	if x != nil {
		return x.Alphagram
	}
	return ""
}

func (x *EditLastScoreRequest) GetNewScore() Score {
	if x != nil {
		return x.NewScore
	}
	return Score_SCORE_NONE
}

func (x *EditLastScoreRequest) GetLastCardRepr() []byte {
	if x != nil {
		return x.LastCardRepr
	}
	return nil
}

type GetCardCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCardCountRequest) Reset() {
	*x = GetCardCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardCountRequest) ProtoMessage() {}

func (x *GetCardCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardCountRequest.ProtoReflect.Descriptor instead.
func (*GetCardCountRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{11}
}

type CardCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumCards   map[string]uint32 `protobuf:"bytes,1,rep,name=num_cards,json=numCards,proto3" json:"num_cards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalCards uint32            `protobuf:"varint,2,opt,name=total_cards,json=totalCards,proto3" json:"total_cards,omitempty"`
}

func (x *CardCountResponse) Reset() {
	*x = CardCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCountResponse) ProtoMessage() {}

func (x *CardCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCountResponse.ProtoReflect.Descriptor instead.
func (*CardCountResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{12}
}

func (x *CardCountResponse) GetNumCards() map[string]uint32 {
	if x != nil {
		return x.NumCards
	}
	return nil
}

func (x *CardCountResponse) GetTotalCards() uint32 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

type NextScheduledCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyOverdue bool   `protobuf:"varint,1,opt,name=only_overdue,json=onlyOverdue,proto3" json:"only_overdue,omitempty"`
	Timezone    string `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Lexicon     string `protobuf:"bytes,3,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
}

func (x *NextScheduledCountRequest) Reset() {
	*x = NextScheduledCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextScheduledCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextScheduledCountRequest) ProtoMessage() {}

func (x *NextScheduledCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextScheduledCountRequest.ProtoReflect.Descriptor instead.
func (*NextScheduledCountRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{13}
}

func (x *NextScheduledCountRequest) GetOnlyOverdue() bool {
	if x != nil {
		return x.OnlyOverdue
	}
	return false
}

func (x *NextScheduledCountRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *NextScheduledCountRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

type NextScheduledBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Breakdown map[string]uint32 `protobuf:"bytes,1,rep,name=breakdown,proto3" json:"breakdown,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *NextScheduledBreakdown) Reset() {
	*x = NextScheduledBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextScheduledBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextScheduledBreakdown) ProtoMessage() {}

func (x *NextScheduledBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextScheduledBreakdown.ProtoReflect.Descriptor instead.
func (*NextScheduledBreakdown) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{14}
}

func (x *NextScheduledBreakdown) GetBreakdown() map[string]uint32 {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

type PostponeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon       string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	NumToPostpone uint32 `protobuf:"varint,2,opt,name=num_to_postpone,json=numToPostpone,proto3" json:"num_to_postpone,omitempty"`
}

func (x *PostponeRequest) Reset() {
	*x = PostponeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostponeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostponeRequest) ProtoMessage() {}

func (x *PostponeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostponeRequest.ProtoReflect.Descriptor instead.
func (*PostponeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{15}
}

func (x *PostponeRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *PostponeRequest) GetNumToPostpone() uint32 {
	if x != nil {
		return x.NumToPostpone
	}
	return 0
}

type PostponeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumPostponed uint32 `protobuf:"varint,1,opt,name=num_postponed,json=numPostponed,proto3" json:"num_postponed,omitempty"`
}

func (x *PostponeResponse) Reset() {
	*x = PostponeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostponeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostponeResponse) ProtoMessage() {}

func (x *PostponeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostponeResponse.ProtoReflect.Descriptor instead.
func (*PostponeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{16}
}

func (x *PostponeResponse) GetNumPostponed() uint32 {
	if x != nil {
		return x.NumPostponed
	}
	return 0
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	// The following two conditions are mutually exclusive.
	OnlyNewQuestions bool     `protobuf:"varint,2,opt,name=only_new_questions,json=onlyNewQuestions,proto3" json:"only_new_questions,omitempty"`
	Alphagrams       []string `protobuf:"bytes,3,rep,name=alphagrams,proto3" json:"alphagrams,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *DeleteRequest) GetOnlyNewQuestions() bool {
	if x != nil {
		return x.OnlyNewQuestions
	}
	return false
}

func (x *DeleteRequest) GetAlphagrams() []string {
	if x != nil {
		return x.Alphagrams
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumDeleted uint32 `protobuf:"varint,1,opt,name=num_deleted,json=numDeleted,proto3" json:"num_deleted,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteResponse) GetNumDeleted() uint32 {
	if x != nil {
		return x.NumDeleted
	}
	return 0
}

type GetDailyProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timezone string `protobuf:"bytes,1,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *GetDailyProgressRequest) Reset() {
	*x = GetDailyProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyProgressRequest) ProtoMessage() {}

func (x *GetDailyProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyProgressRequest.ProtoReflect.Descriptor instead.
func (*GetDailyProgressRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetDailyProgressRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type GetDailyProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressStats map[string]int32 `protobuf:"bytes,1,rep,name=progress_stats,json=progressStats,proto3" json:"progress_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetDailyProgressResponse) Reset() {
	*x = GetDailyProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyProgressResponse) ProtoMessage() {}

func (x *GetDailyProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyProgressResponse.ProtoReflect.Descriptor instead.
func (*GetDailyProgressResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetDailyProgressResponse) GetProgressStats() map[string]int32 {
	if x != nil {
		return x.ProgressStats
	}
	return nil
}

type GetDailyLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timezone string `protobuf:"bytes,1,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *GetDailyLeaderboardRequest) Reset() {
	*x = GetDailyLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyLeaderboardRequest) ProtoMessage() {}

func (x *GetDailyLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetDailyLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetDailyLeaderboardRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type GetDailyLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GetDailyLeaderboardResponse_LeaderboardItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetDailyLeaderboardResponse) Reset() {
	*x = GetDailyLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyLeaderboardResponse) ProtoMessage() {}

func (x *GetDailyLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetDailyLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{22}
}

func (x *GetDailyLeaderboardResponse) GetItems() []*GetDailyLeaderboardResponse_LeaderboardItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetDailyLeaderboardResponse_LeaderboardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	CardsStudied int32  `protobuf:"varint,2,opt,name=cards_studied,json=cardsStudied,proto3" json:"cards_studied,omitempty"`
}

func (x *GetDailyLeaderboardResponse_LeaderboardItem) Reset() {
	*x = GetDailyLeaderboardResponse_LeaderboardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wordvault_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyLeaderboardResponse_LeaderboardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyLeaderboardResponse_LeaderboardItem) ProtoMessage() {}

func (x *GetDailyLeaderboardResponse_LeaderboardItem) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wordvault_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyLeaderboardResponse_LeaderboardItem.ProtoReflect.Descriptor instead.
func (*GetDailyLeaderboardResponse_LeaderboardItem) Descriptor() ([]byte, []int) {
	return file_rpc_wordvault_api_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetDailyLeaderboardResponse_LeaderboardItem) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetDailyLeaderboardResponse_LeaderboardItem) GetCardsStudied() int32 {
	if x != nil {
		return x.CardsStudied
	}
	return 0
}

var File_rpc_wordvault_api_proto protoreflect.FileDescriptor

var file_rpc_wordvault_api_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x22, 0x4e, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x49, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x39, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69,
	0x63, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x64, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x2e, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x72, 0x0a, 0x10, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65,
	0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x22, 0x7c, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x72, 0x22, 0x4b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x45,
	0x64, 0x69, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x72,
	0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e,
	0x75, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x19, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x64, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x70,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x54, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x22, 0x37, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x64, 0x22, 0x77, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x65,
	0x77, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x31, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x6f, 0x72, 0x64,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x40, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x38, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xb7, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x6f,
	0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4a, 0x0a, 0x0f, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x73, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x65, 0x64, 0x2a, 0x58, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x41, 0x53, 0x59, 0x10, 0x04,
	0x32, 0x81, 0x08, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x77,
	0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x2e,
	0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x5d, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e,
	0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x08, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x6f, 0x72,
	0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f,
	0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77,
	0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x77, 0x6f,
	0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x42, 0x93, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72,
	0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x31, 0x34, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x62, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x77,
	0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0xa2, 0x02, 0x03, 0x57, 0x58, 0x58, 0xaa, 0x02,
	0x09, 0x57, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0xca, 0x02, 0x09, 0x57, 0x6f, 0x72,
	0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0xe2, 0x02, 0x15, 0x57, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x09, 0x57, 0x6f, 0x72, 0x64, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rpc_wordvault_api_proto_rawDescOnce sync.Once
	file_rpc_wordvault_api_proto_rawDescData = file_rpc_wordvault_api_proto_rawDesc
)

func file_rpc_wordvault_api_proto_rawDescGZIP() []byte {
	file_rpc_wordvault_api_proto_rawDescOnce.Do(func() {
		file_rpc_wordvault_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_wordvault_api_proto_rawDescData)
	})
	return file_rpc_wordvault_api_proto_rawDescData
}

var file_rpc_wordvault_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_wordvault_api_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_rpc_wordvault_api_proto_goTypes = []interface{}{
	(Score)(0),                             // 0: wordvault.Score
	(*Card)(nil),                           // 1: wordvault.Card
	(*GetCardInfoRequest)(nil),             // 2: wordvault.GetCardInfoRequest
	(*GetNextScheduledRequest)(nil),        // 3: wordvault.GetNextScheduledRequest
	(*GetSingleNextScheduledRequest)(nil),  // 4: wordvault.GetSingleNextScheduledRequest
	(*GetSingleNextScheduledResponse)(nil), // 5: wordvault.GetSingleNextScheduledResponse
	(*Cards)(nil),                          // 6: wordvault.Cards
	(*ScoreCardRequest)(nil),               // 7: wordvault.ScoreCardRequest
	(*ScoreCardResponse)(nil),              // 8: wordvault.ScoreCardResponse
	(*AddCardsRequest)(nil),                // 9: wordvault.AddCardsRequest
	(*AddCardsResponse)(nil),               // 10: wordvault.AddCardsResponse
	(*EditLastScoreRequest)(nil),           // 11: wordvault.EditLastScoreRequest
	(*GetCardCountRequest)(nil),            // 12: wordvault.GetCardCountRequest
	(*CardCountResponse)(nil),              // 13: wordvault.CardCountResponse
	(*NextScheduledCountRequest)(nil),      // 14: wordvault.NextScheduledCountRequest
	(*NextScheduledBreakdown)(nil),         // 15: wordvault.NextScheduledBreakdown
	(*PostponeRequest)(nil),                // 16: wordvault.PostponeRequest
	(*PostponeResponse)(nil),               // 17: wordvault.PostponeResponse
	(*DeleteRequest)(nil),                  // 18: wordvault.DeleteRequest
	(*DeleteResponse)(nil),                 // 19: wordvault.DeleteResponse
	(*GetDailyProgressRequest)(nil),        // 20: wordvault.GetDailyProgressRequest
	(*GetDailyProgressResponse)(nil),       // 21: wordvault.GetDailyProgressResponse
	(*GetDailyLeaderboardRequest)(nil),     // 22: wordvault.GetDailyLeaderboardRequest
	(*GetDailyLeaderboardResponse)(nil),    // 23: wordvault.GetDailyLeaderboardResponse
	nil,                                    // 24: wordvault.CardCountResponse.NumCardsEntry
	nil,                                    // 25: wordvault.NextScheduledBreakdown.BreakdownEntry
	nil,                                    // 26: wordvault.GetDailyProgressResponse.ProgressStatsEntry
	(*GetDailyLeaderboardResponse_LeaderboardItem)(nil), // 27: wordvault.GetDailyLeaderboardResponse.LeaderboardItem
	(*wordsearcher.Alphagram)(nil),                      // 28: wordsearcher.Alphagram
	(*timestamppb.Timestamp)(nil),                       // 29: google.protobuf.Timestamp
}
var file_rpc_wordvault_api_proto_depIdxs = []int32{
	28, // 0: wordvault.Card.alphagram:type_name -> wordsearcher.Alphagram
	1,  // 1: wordvault.GetSingleNextScheduledResponse.card:type_name -> wordvault.Card
	1,  // 2: wordvault.Cards.cards:type_name -> wordvault.Card
	0,  // 3: wordvault.ScoreCardRequest.score:type_name -> wordvault.Score
	29, // 4: wordvault.ScoreCardResponse.next_scheduled:type_name -> google.protobuf.Timestamp
	0,  // 5: wordvault.EditLastScoreRequest.new_score:type_name -> wordvault.Score
	24, // 6: wordvault.CardCountResponse.num_cards:type_name -> wordvault.CardCountResponse.NumCardsEntry
	25, // 7: wordvault.NextScheduledBreakdown.breakdown:type_name -> wordvault.NextScheduledBreakdown.BreakdownEntry
	26, // 8: wordvault.GetDailyProgressResponse.progress_stats:type_name -> wordvault.GetDailyProgressResponse.ProgressStatsEntry
	27, // 9: wordvault.GetDailyLeaderboardResponse.items:type_name -> wordvault.GetDailyLeaderboardResponse.LeaderboardItem
	12, // 10: wordvault.WordVaultService.GetCardCount:input_type -> wordvault.GetCardCountRequest
	2,  // 11: wordvault.WordVaultService.GetCardInformation:input_type -> wordvault.GetCardInfoRequest
	3,  // 12: wordvault.WordVaultService.GetNextScheduled:input_type -> wordvault.GetNextScheduledRequest
	4,  // 13: wordvault.WordVaultService.GetSingleNextScheduled:input_type -> wordvault.GetSingleNextScheduledRequest
	14, // 14: wordvault.WordVaultService.NextScheduledCount:input_type -> wordvault.NextScheduledCountRequest
	7,  // 15: wordvault.WordVaultService.ScoreCard:input_type -> wordvault.ScoreCardRequest
	11, // 16: wordvault.WordVaultService.EditLastScore:input_type -> wordvault.EditLastScoreRequest
	9,  // 17: wordvault.WordVaultService.AddCards:input_type -> wordvault.AddCardsRequest
	16, // 18: wordvault.WordVaultService.Postpone:input_type -> wordvault.PostponeRequest
	18, // 19: wordvault.WordVaultService.Delete:input_type -> wordvault.DeleteRequest
	20, // 20: wordvault.WordVaultService.GetDailyProgress:input_type -> wordvault.GetDailyProgressRequest
	22, // 21: wordvault.WordVaultService.GetDailyLeaderboard:input_type -> wordvault.GetDailyLeaderboardRequest
	13, // 22: wordvault.WordVaultService.GetCardCount:output_type -> wordvault.CardCountResponse
	6,  // 23: wordvault.WordVaultService.GetCardInformation:output_type -> wordvault.Cards
	6,  // 24: wordvault.WordVaultService.GetNextScheduled:output_type -> wordvault.Cards
	5,  // 25: wordvault.WordVaultService.GetSingleNextScheduled:output_type -> wordvault.GetSingleNextScheduledResponse
	15, // 26: wordvault.WordVaultService.NextScheduledCount:output_type -> wordvault.NextScheduledBreakdown
	8,  // 27: wordvault.WordVaultService.ScoreCard:output_type -> wordvault.ScoreCardResponse
	8,  // 28: wordvault.WordVaultService.EditLastScore:output_type -> wordvault.ScoreCardResponse
	10, // 29: wordvault.WordVaultService.AddCards:output_type -> wordvault.AddCardsResponse
	17, // 30: wordvault.WordVaultService.Postpone:output_type -> wordvault.PostponeResponse
	19, // 31: wordvault.WordVaultService.Delete:output_type -> wordvault.DeleteResponse
	21, // 32: wordvault.WordVaultService.GetDailyProgress:output_type -> wordvault.GetDailyProgressResponse
	23, // 33: wordvault.WordVaultService.GetDailyLeaderboard:output_type -> wordvault.GetDailyLeaderboardResponse
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_rpc_wordvault_api_proto_init() }
func file_rpc_wordvault_api_proto_init() {
	if File_rpc_wordvault_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_wordvault_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextScheduledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleNextScheduledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleNextScheduledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditLastScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextScheduledCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextScheduledBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostponeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostponeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wordvault_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyLeaderboardResponse_LeaderboardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_wordvault_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_wordvault_api_proto_goTypes,
		DependencyIndexes: file_rpc_wordvault_api_proto_depIdxs,
		EnumInfos:         file_rpc_wordvault_api_proto_enumTypes,
		MessageInfos:      file_rpc_wordvault_api_proto_msgTypes,
	}.Build()
	File_rpc_wordvault_api_proto = out.File
	file_rpc_wordvault_api_proto_rawDesc = nil
	file_rpc_wordvault_api_proto_goTypes = nil
	file_rpc_wordvault_api_proto_depIdxs = nil
}
