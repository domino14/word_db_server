// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/wordvault/api.proto

package wordvaultconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	wordvault "github.com/domino14/word_db_server/api/rpc/wordvault"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WordVaultServiceName is the fully-qualified name of the WordVaultService service.
	WordVaultServiceName = "wordvault.WordVaultService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WordVaultServiceGetCardCountProcedure is the fully-qualified name of the WordVaultService's
	// GetCardCount RPC.
	WordVaultServiceGetCardCountProcedure = "/wordvault.WordVaultService/GetCardCount"
	// WordVaultServiceGetCardInformationProcedure is the fully-qualified name of the WordVaultService's
	// GetCardInformation RPC.
	WordVaultServiceGetCardInformationProcedure = "/wordvault.WordVaultService/GetCardInformation"
	// WordVaultServiceGetNextScheduledProcedure is the fully-qualified name of the WordVaultService's
	// GetNextScheduled RPC.
	WordVaultServiceGetNextScheduledProcedure = "/wordvault.WordVaultService/GetNextScheduled"
	// WordVaultServiceNextScheduledCountProcedure is the fully-qualified name of the WordVaultService's
	// NextScheduledCount RPC.
	WordVaultServiceNextScheduledCountProcedure = "/wordvault.WordVaultService/NextScheduledCount"
	// WordVaultServiceScoreCardProcedure is the fully-qualified name of the WordVaultService's
	// ScoreCard RPC.
	WordVaultServiceScoreCardProcedure = "/wordvault.WordVaultService/ScoreCard"
	// WordVaultServiceEditLastScoreProcedure is the fully-qualified name of the WordVaultService's
	// EditLastScore RPC.
	WordVaultServiceEditLastScoreProcedure = "/wordvault.WordVaultService/EditLastScore"
	// WordVaultServiceAddCardsProcedure is the fully-qualified name of the WordVaultService's AddCards
	// RPC.
	WordVaultServiceAddCardsProcedure = "/wordvault.WordVaultService/AddCards"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	wordVaultServiceServiceDescriptor                  = wordvault.File_rpc_wordvault_api_proto.Services().ByName("WordVaultService")
	wordVaultServiceGetCardCountMethodDescriptor       = wordVaultServiceServiceDescriptor.Methods().ByName("GetCardCount")
	wordVaultServiceGetCardInformationMethodDescriptor = wordVaultServiceServiceDescriptor.Methods().ByName("GetCardInformation")
	wordVaultServiceGetNextScheduledMethodDescriptor   = wordVaultServiceServiceDescriptor.Methods().ByName("GetNextScheduled")
	wordVaultServiceNextScheduledCountMethodDescriptor = wordVaultServiceServiceDescriptor.Methods().ByName("NextScheduledCount")
	wordVaultServiceScoreCardMethodDescriptor          = wordVaultServiceServiceDescriptor.Methods().ByName("ScoreCard")
	wordVaultServiceEditLastScoreMethodDescriptor      = wordVaultServiceServiceDescriptor.Methods().ByName("EditLastScore")
	wordVaultServiceAddCardsMethodDescriptor           = wordVaultServiceServiceDescriptor.Methods().ByName("AddCards")
)

// WordVaultServiceClient is a client for the wordvault.WordVaultService service.
type WordVaultServiceClient interface {
	GetCardCount(context.Context, *connect.Request[wordvault.GetCardCountRequest]) (*connect.Response[wordvault.CardCountResponse], error)
	GetCardInformation(context.Context, *connect.Request[wordvault.GetCardInfoRequest]) (*connect.Response[wordvault.Cards], error)
	GetNextScheduled(context.Context, *connect.Request[wordvault.GetNextScheduledRequest]) (*connect.Response[wordvault.Cards], error)
	NextScheduledCount(context.Context, *connect.Request[wordvault.NextScheduledCountRequest]) (*connect.Response[wordvault.NextScheduledBreakdown], error)
	ScoreCard(context.Context, *connect.Request[wordvault.ScoreCardRequest]) (*connect.Response[wordvault.ScoreCardResponse], error)
	EditLastScore(context.Context, *connect.Request[wordvault.EditLastScoreRequest]) (*connect.Response[wordvault.ScoreCardResponse], error)
	AddCards(context.Context, *connect.Request[wordvault.AddCardsRequest]) (*connect.Response[wordvault.AddCardsResponse], error)
}

// NewWordVaultServiceClient constructs a client for the wordvault.WordVaultService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWordVaultServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WordVaultServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wordVaultServiceClient{
		getCardCount: connect.NewClient[wordvault.GetCardCountRequest, wordvault.CardCountResponse](
			httpClient,
			baseURL+WordVaultServiceGetCardCountProcedure,
			connect.WithSchema(wordVaultServiceGetCardCountMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getCardInformation: connect.NewClient[wordvault.GetCardInfoRequest, wordvault.Cards](
			httpClient,
			baseURL+WordVaultServiceGetCardInformationProcedure,
			connect.WithSchema(wordVaultServiceGetCardInformationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getNextScheduled: connect.NewClient[wordvault.GetNextScheduledRequest, wordvault.Cards](
			httpClient,
			baseURL+WordVaultServiceGetNextScheduledProcedure,
			connect.WithSchema(wordVaultServiceGetNextScheduledMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		nextScheduledCount: connect.NewClient[wordvault.NextScheduledCountRequest, wordvault.NextScheduledBreakdown](
			httpClient,
			baseURL+WordVaultServiceNextScheduledCountProcedure,
			connect.WithSchema(wordVaultServiceNextScheduledCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		scoreCard: connect.NewClient[wordvault.ScoreCardRequest, wordvault.ScoreCardResponse](
			httpClient,
			baseURL+WordVaultServiceScoreCardProcedure,
			connect.WithSchema(wordVaultServiceScoreCardMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		editLastScore: connect.NewClient[wordvault.EditLastScoreRequest, wordvault.ScoreCardResponse](
			httpClient,
			baseURL+WordVaultServiceEditLastScoreProcedure,
			connect.WithSchema(wordVaultServiceEditLastScoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addCards: connect.NewClient[wordvault.AddCardsRequest, wordvault.AddCardsResponse](
			httpClient,
			baseURL+WordVaultServiceAddCardsProcedure,
			connect.WithSchema(wordVaultServiceAddCardsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// wordVaultServiceClient implements WordVaultServiceClient.
type wordVaultServiceClient struct {
	getCardCount       *connect.Client[wordvault.GetCardCountRequest, wordvault.CardCountResponse]
	getCardInformation *connect.Client[wordvault.GetCardInfoRequest, wordvault.Cards]
	getNextScheduled   *connect.Client[wordvault.GetNextScheduledRequest, wordvault.Cards]
	nextScheduledCount *connect.Client[wordvault.NextScheduledCountRequest, wordvault.NextScheduledBreakdown]
	scoreCard          *connect.Client[wordvault.ScoreCardRequest, wordvault.ScoreCardResponse]
	editLastScore      *connect.Client[wordvault.EditLastScoreRequest, wordvault.ScoreCardResponse]
	addCards           *connect.Client[wordvault.AddCardsRequest, wordvault.AddCardsResponse]
}

// GetCardCount calls wordvault.WordVaultService.GetCardCount.
func (c *wordVaultServiceClient) GetCardCount(ctx context.Context, req *connect.Request[wordvault.GetCardCountRequest]) (*connect.Response[wordvault.CardCountResponse], error) {
	return c.getCardCount.CallUnary(ctx, req)
}

// GetCardInformation calls wordvault.WordVaultService.GetCardInformation.
func (c *wordVaultServiceClient) GetCardInformation(ctx context.Context, req *connect.Request[wordvault.GetCardInfoRequest]) (*connect.Response[wordvault.Cards], error) {
	return c.getCardInformation.CallUnary(ctx, req)
}

// GetNextScheduled calls wordvault.WordVaultService.GetNextScheduled.
func (c *wordVaultServiceClient) GetNextScheduled(ctx context.Context, req *connect.Request[wordvault.GetNextScheduledRequest]) (*connect.Response[wordvault.Cards], error) {
	return c.getNextScheduled.CallUnary(ctx, req)
}

// NextScheduledCount calls wordvault.WordVaultService.NextScheduledCount.
func (c *wordVaultServiceClient) NextScheduledCount(ctx context.Context, req *connect.Request[wordvault.NextScheduledCountRequest]) (*connect.Response[wordvault.NextScheduledBreakdown], error) {
	return c.nextScheduledCount.CallUnary(ctx, req)
}

// ScoreCard calls wordvault.WordVaultService.ScoreCard.
func (c *wordVaultServiceClient) ScoreCard(ctx context.Context, req *connect.Request[wordvault.ScoreCardRequest]) (*connect.Response[wordvault.ScoreCardResponse], error) {
	return c.scoreCard.CallUnary(ctx, req)
}

// EditLastScore calls wordvault.WordVaultService.EditLastScore.
func (c *wordVaultServiceClient) EditLastScore(ctx context.Context, req *connect.Request[wordvault.EditLastScoreRequest]) (*connect.Response[wordvault.ScoreCardResponse], error) {
	return c.editLastScore.CallUnary(ctx, req)
}

// AddCards calls wordvault.WordVaultService.AddCards.
func (c *wordVaultServiceClient) AddCards(ctx context.Context, req *connect.Request[wordvault.AddCardsRequest]) (*connect.Response[wordvault.AddCardsResponse], error) {
	return c.addCards.CallUnary(ctx, req)
}

// WordVaultServiceHandler is an implementation of the wordvault.WordVaultService service.
type WordVaultServiceHandler interface {
	GetCardCount(context.Context, *connect.Request[wordvault.GetCardCountRequest]) (*connect.Response[wordvault.CardCountResponse], error)
	GetCardInformation(context.Context, *connect.Request[wordvault.GetCardInfoRequest]) (*connect.Response[wordvault.Cards], error)
	GetNextScheduled(context.Context, *connect.Request[wordvault.GetNextScheduledRequest]) (*connect.Response[wordvault.Cards], error)
	NextScheduledCount(context.Context, *connect.Request[wordvault.NextScheduledCountRequest]) (*connect.Response[wordvault.NextScheduledBreakdown], error)
	ScoreCard(context.Context, *connect.Request[wordvault.ScoreCardRequest]) (*connect.Response[wordvault.ScoreCardResponse], error)
	EditLastScore(context.Context, *connect.Request[wordvault.EditLastScoreRequest]) (*connect.Response[wordvault.ScoreCardResponse], error)
	AddCards(context.Context, *connect.Request[wordvault.AddCardsRequest]) (*connect.Response[wordvault.AddCardsResponse], error)
}

// NewWordVaultServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWordVaultServiceHandler(svc WordVaultServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wordVaultServiceGetCardCountHandler := connect.NewUnaryHandler(
		WordVaultServiceGetCardCountProcedure,
		svc.GetCardCount,
		connect.WithSchema(wordVaultServiceGetCardCountMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	wordVaultServiceGetCardInformationHandler := connect.NewUnaryHandler(
		WordVaultServiceGetCardInformationProcedure,
		svc.GetCardInformation,
		connect.WithSchema(wordVaultServiceGetCardInformationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	wordVaultServiceGetNextScheduledHandler := connect.NewUnaryHandler(
		WordVaultServiceGetNextScheduledProcedure,
		svc.GetNextScheduled,
		connect.WithSchema(wordVaultServiceGetNextScheduledMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	wordVaultServiceNextScheduledCountHandler := connect.NewUnaryHandler(
		WordVaultServiceNextScheduledCountProcedure,
		svc.NextScheduledCount,
		connect.WithSchema(wordVaultServiceNextScheduledCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	wordVaultServiceScoreCardHandler := connect.NewUnaryHandler(
		WordVaultServiceScoreCardProcedure,
		svc.ScoreCard,
		connect.WithSchema(wordVaultServiceScoreCardMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	wordVaultServiceEditLastScoreHandler := connect.NewUnaryHandler(
		WordVaultServiceEditLastScoreProcedure,
		svc.EditLastScore,
		connect.WithSchema(wordVaultServiceEditLastScoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	wordVaultServiceAddCardsHandler := connect.NewUnaryHandler(
		WordVaultServiceAddCardsProcedure,
		svc.AddCards,
		connect.WithSchema(wordVaultServiceAddCardsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wordvault.WordVaultService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WordVaultServiceGetCardCountProcedure:
			wordVaultServiceGetCardCountHandler.ServeHTTP(w, r)
		case WordVaultServiceGetCardInformationProcedure:
			wordVaultServiceGetCardInformationHandler.ServeHTTP(w, r)
		case WordVaultServiceGetNextScheduledProcedure:
			wordVaultServiceGetNextScheduledHandler.ServeHTTP(w, r)
		case WordVaultServiceNextScheduledCountProcedure:
			wordVaultServiceNextScheduledCountHandler.ServeHTTP(w, r)
		case WordVaultServiceScoreCardProcedure:
			wordVaultServiceScoreCardHandler.ServeHTTP(w, r)
		case WordVaultServiceEditLastScoreProcedure:
			wordVaultServiceEditLastScoreHandler.ServeHTTP(w, r)
		case WordVaultServiceAddCardsProcedure:
			wordVaultServiceAddCardsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWordVaultServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWordVaultServiceHandler struct{}

func (UnimplementedWordVaultServiceHandler) GetCardCount(context.Context, *connect.Request[wordvault.GetCardCountRequest]) (*connect.Response[wordvault.CardCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.GetCardCount is not implemented"))
}

func (UnimplementedWordVaultServiceHandler) GetCardInformation(context.Context, *connect.Request[wordvault.GetCardInfoRequest]) (*connect.Response[wordvault.Cards], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.GetCardInformation is not implemented"))
}

func (UnimplementedWordVaultServiceHandler) GetNextScheduled(context.Context, *connect.Request[wordvault.GetNextScheduledRequest]) (*connect.Response[wordvault.Cards], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.GetNextScheduled is not implemented"))
}

func (UnimplementedWordVaultServiceHandler) NextScheduledCount(context.Context, *connect.Request[wordvault.NextScheduledCountRequest]) (*connect.Response[wordvault.NextScheduledBreakdown], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.NextScheduledCount is not implemented"))
}

func (UnimplementedWordVaultServiceHandler) ScoreCard(context.Context, *connect.Request[wordvault.ScoreCardRequest]) (*connect.Response[wordvault.ScoreCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.ScoreCard is not implemented"))
}

func (UnimplementedWordVaultServiceHandler) EditLastScore(context.Context, *connect.Request[wordvault.EditLastScoreRequest]) (*connect.Response[wordvault.ScoreCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.EditLastScore is not implemented"))
}

func (UnimplementedWordVaultServiceHandler) AddCards(context.Context, *connect.Request[wordvault.AddCardsRequest]) (*connect.Response[wordvault.AddCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordvault.WordVaultService.AddCards is not implemented"))
}
