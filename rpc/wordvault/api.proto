syntax = "proto3";
package wordvault;

import "google/protobuf/timestamp.proto";
import "wordsearcher/searcher.proto";

enum Score {
  SCORE_NONE = 0;
  SCORE_AGAIN = 1;
  SCORE_HARD = 2;
  SCORE_GOOD = 3;
  SCORE_EASY = 4;
}

enum Status {
  STATUS_NONE = 0;
  STATUS_NEW = 1;
  STATUS_LEARNING = 2;
  STATUS_REVIEW = 3;
  STATUS_RELEARNING = 4;
}

message Card {
  string lexicon = 1;
  wordsearcher.Alphagram alphagram = 2;
  google.protobuf.Timestamp last_reviewed = 3;
  google.protobuf.Timestamp next_scheduled = 4;
  int32 num_asked = 5;
  int32 num_lapses = 6;
  // https://github.com/open-spaced-repetition/fsrs4anki/wiki/ABC-of-FSRS
  // FSRS is based on the "Three Component Model of Memory". The model
  // asserts that three variables are sufficient to describe the status
  // of a unitary memory in a human brain. These three variables include:

  // Stability (S): The time, in days, required for R to decrease from 100% to
  // 90%. For example, S = 365 means that an entire year will pass before the
  // probability of recalling a particular card drops to 90%.
  double stability = 7;
  // Difficulty (D): The inherent complexity of a particular information.
  // It represents how difficult it is to increase memory stability after a
  // review.
  double difficulty = 8;

  double retrievability = 9;
  Status status = 10;
}

message GetCardInfoRequest {
  string lexicon = 1;
  repeated string alphagrams = 2;
}

message GetNextScheduledRequest {
  string lexicon = 1;
  int32 limit = 2;
}

message Cards { repeated Card cards = 1; }

message ScoreCardRequest {
  Score score = 1;
  string lexicon = 2;
  string alphagram = 3;
}

message ScoreCardResponse { google.protobuf.Timestamp next_scheduled = 1; }

message AddCardRequest {
  string lexicon = 1;
  string alphagram = 2;
}

message AddCardResponse {}

message AddCardsRequest {
  string lexicon = 1;
  repeated string alphagrams = 2;
}

message AddCardsResponse {}

service WordVaultService {
  rpc GetCardInformation(GetCardInfoRequest) returns (Cards) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetNextScheduled(GetNextScheduledRequest) returns (Cards) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc ScoreCard(ScoreCardRequest) returns (ScoreCardResponse);
  rpc AddCard(AddCardRequest) returns (AddCardResponse);
  rpc AddCards(AddCardsRequest) returns (AddCardsResponse);
}