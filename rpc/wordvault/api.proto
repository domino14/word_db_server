syntax = "proto3";
package wordvault;

import "google/protobuf/timestamp.proto";
import "rpc/wordsearcher/searcher.proto";

enum Score {
  SCORE_NONE = 0;
  SCORE_AGAIN = 1;
  SCORE_HARD = 2;
  SCORE_GOOD = 3;
  SCORE_EASY = 4;
}

message Card {
  string lexicon = 1;
  wordsearcher.Alphagram alphagram = 2;
  bytes card_json_repr = 3;
  // The retrievability of a card is not part of the json repr and is computed
  // as of the time of request.
  double retrievability = 4;
  bytes review_log = 5;
  optional uint64 deck_id = 6;
}

message CardPreview {
    string lexicon = 1;
    string alphagram = 2;
    optional uint64 deck_id = 5;
}

message GetCardInfoRequest {
  string lexicon = 1;
  repeated string alphagrams = 2;
}

message GetNextScheduledRequest {
  string lexicon = 1;
  uint32 limit = 2;
  optional uint64 deck_id = 3;
}

message GetSingleNextScheduledRequest {
    string lexicon = 1;
    optional uint64 deck_id = 2;
}

message GetSingleNextScheduledResponse {
  Card card = 1;
  uint32 overdue_count = 2;
}

message Cards { repeated Card cards = 1; }

message ScoreCardRequest {
  Score score = 1;
  string lexicon = 2;
  string alphagram = 3;
}

message ScoreCardResponse {
  google.protobuf.Timestamp next_scheduled = 1;
  bytes card_json_repr = 2;
}

message AddCardsRequest {
  string lexicon = 1;
  repeated string alphagrams = 2;
  optional uint64 deck_id = 3;
}

message AddCardsResponse {
    uint32 num_cards_added = 1;
    uint32 num_cards_in_other_decks = 2;
    repeated CardPreview cards_in_other_decks_preview = 3;
}

message MoveCardsRequest {
  string lexicon = 1;
  repeated string alphagrams = 2;
  optional uint64 deck_id = 3;
}

message MoveCardsResponse {
  uint32 num_cards_moved = 1;
}

message EditLastScoreRequest {
  string lexicon = 1;
  string alphagram = 2;
  Score new_score = 3;
  bytes last_card_repr = 4;
}

message GetCardCountRequest {}

message CardCountResponse {
  map<string, uint32> num_cards = 1;
  uint32 total_cards = 2;
}

message NextScheduledCountRequest {
  bool only_overdue = 1;
  string timezone = 2;
  string lexicon = 3;
}

message NextScheduledBreakdown { map<string, uint32> breakdown = 1; }

message NextScheduledCountByDeckRequest {
  bool only_overdue = 1;
  string timezone = 2;
  string lexicon = 3;
}

message DeckBreakdown {
  uint64 deck_id = 1;
  map<string, uint32> breakdown = 2;
}

message NextScheduledCountByDeckResponse {
  repeated DeckBreakdown breakdowns = 1;
}

// TODO: make this deck-aware with a mutually exclusive all_decks/deck_id
// parameter
message PostponeRequest {
  string lexicon = 1;
  uint32 num_to_postpone = 2;
}

message PostponeResponse { uint32 num_postponed = 1; }

// TODO: make this deck-aware
message DeleteRequest {
  string lexicon = 1;
  // The following two conditions are mutually exclusive.
  bool only_new_questions = 2;
  repeated string only_alphagrams = 3;
  bool all_questions = 4;
}

message DeleteResponse { uint32 num_deleted = 1; }

message GetDailyProgressRequest { string timezone = 1; }

message GetDailyProgressResponse { map<string, int32> progress_stats = 1; }

message GetDailyLeaderboardRequest { string timezone = 1; }

message GetDailyLeaderboardResponse {
  message LeaderboardItem {
    string user = 1;
    int32 cards_studied = 2;
  }
  repeated LeaderboardItem items = 1;
}

enum FsrsScheduler {
    FSRS_SCHEDULER_NONE = 0;
    FSRS_SCHEDULER_LONG_TERM = 1;
    FSRS_SCHEDULER_SHORT_TERM = 2;
}

message FsrsParameters {
    FsrsScheduler scheduler = 1;
    double request_retention = 2;
}

message GetFsrsParametersRequest {}

message GetFsrsParametersResponse {
    FsrsParameters parameters = 1;
}

message EditFsrsParametersRequest {
    FsrsParameters parameters = 1;
}

message Deck {
  int64 id = 1;
  string lexicon = 2;
  string name = 3;
}

message AddDeckRequest {
  string name = 1;
  string lexicon = 2;
}

message AddDeckResponse {
    Deck deck = 1;
}

message GetDecksRequest {}

message GetDecksResponse {
  repeated Deck decks = 1;
}

message EditDeckRequest {
  int64 id = 1;
  string name = 2;
}

message EditDeckResponse {
  Deck deck = 1;
}

message EditFsrsParametersResponse {}

service WordVaultService {
  rpc GetCardCount(GetCardCountRequest) returns (CardCountResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetCardInformation(GetCardInfoRequest) returns (Cards) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetNextScheduled(GetNextScheduledRequest) returns (Cards) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetSingleNextScheduled(GetSingleNextScheduledRequest)
      returns (GetSingleNextScheduledResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc NextScheduledCount(NextScheduledCountRequest)
      returns (NextScheduledBreakdown);
  rpc ScoreCard(ScoreCardRequest) returns (ScoreCardResponse);
  rpc EditLastScore(EditLastScoreRequest) returns (ScoreCardResponse);
  rpc AddCards(AddCardsRequest) returns (AddCardsResponse);
  rpc MoveCards(MoveCardsRequest) returns (MoveCardsResponse);
  rpc Postpone(PostponeRequest) returns (PostponeResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc GetDailyProgress(GetDailyProgressRequest)
      returns (GetDailyProgressResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetDailyLeaderboard(GetDailyLeaderboardRequest)
      returns (GetDailyLeaderboardResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetFsrsParameters(GetFsrsParametersRequest)
      returns (GetFsrsParametersResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc EditFsrsParameters(EditFsrsParametersRequest) returns (EditFsrsParametersResponse);
  rpc AddDeck(AddDeckRequest) returns (AddDeckResponse);
  rpc GetDecks(GetDecksRequest) returns (GetDecksResponse);
  rpc EditDeck(EditDeckRequest) returns (EditDeckResponse);
}
