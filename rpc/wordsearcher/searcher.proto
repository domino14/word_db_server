syntax = "proto3";
package wordsearcher;

// An Alphagram encapsulates info about an alphagram, including the words,
// length, probability, combinations.
message Alphagram {
  string alphagram = 1;
  repeated Word words = 2;
  // expandedRepr is true if the length, probability, combinations are
  // included. Otherwise, this is an "unexpanded" alphagram.
  // Note that if expandedRepr is true, then the `words` field is also
  // expanded (with definition, hooks, etc).
  bool expandedRepr = 3;

  int32 length = 4;
  int32 probability = 5;
  int64 combinations = 6;
  int32 difficulty = 7;
}

// A Word is more than just the string representing the word. It has other
// info like the definition, hooks, lex symbols, etc.
message Word {
  string word = 1;
  string alphagram =
      2; // Note that this alphagram is not the same as Alphagram above.
  // Note: the following fields are not filled in if the alphagram's
  // `expandedRepr` is false. Protobuf fields are optional already, but
  // this lets us be explicit.
  string definition = 3;
  string front_hooks = 4;
  string back_hooks = 5;
  string lexicon_symbols = 6;
  bool inner_front_hook = 7;
  bool inner_back_hook = 8;
}

// A SearchRequest encapsulates a number of varied conditions and lets one
// search for questions.
message SearchRequest {

  repeated SearchParam searchparams = 1;
  bool expand = 2;

  enum Condition {
    LEXICON = 0;
    LENGTH = 1;
    PROBABILITY_RANGE = 2;
    PROBABILITY_LIST = 3;
    PROBABILITY_LIMIT = 4;
    NUMBER_OF_ANAGRAMS = 5;
    NUMBER_OF_VOWELS = 6;
    // TAGS won't be implemented in the server, but we still want
    // to define it here because the GUI client will use it (and
    // undergo transformation into ALPHAGRAM_LIST before it hits
    // the server)
    HAS_TAGS = 7;
    POINT_VALUE = 8;
    MATCHING_ANAGRAM = 9;
    ALPHAGRAM_LIST = 10;
    NOT_IN_LEXICON = 11;

    reserved 12;
    WORD_LIST = 13;

    // These are reserved for blank challenges. They're not even actually
    // used by this proto, but by the front end when displaying search
    // boxes.
    SINGLE_VALUE_LENGTH = 14;
    NUM_TWO_BLANKS = 15;
    MAX_SOLUTIONS = 16;

    // More alphagram searches
    DIFFICULTY_RANGE = 17;
    PLAYABILITY_RANGE = 18;
    DELETED_WORD = 19;
  }

  enum NotInLexCondition {
    OTHER_ENGLISH = 0;
    PREVIOUS_VERSION = 1;
  }

  message MinMax {
    // Used for length, prob range, prob limit, num anagrams,
    // num_vowels, point value
    int32 min = 1;
    int32 max = 2;
  }

  message StringValue {
    // Used for lexicon, matching anagram, not_in_lexicon
    string value = 1;
  }

  message StringArray {
    // Used for alphagram_list
    repeated string values = 1;
  }

  message NumberArray {
    // Used for prob list
    repeated int32 values = 1;
  }

  message NumberValue { int32 value = 1; }

  message SearchParam {
    Condition condition = 1;
    oneof conditionparam {
      MinMax minmax = 2;
      StringValue stringvalue = 3;
      StringArray stringarray = 4;
      NumberArray numberarray = 5;
      NumberValue numbervalue = 6;
    };
  }
}

message SearchResponse {
  repeated Alphagram alphagrams = 1;
  string lexicon = 2;
}

message AnagramRequest {
  enum Mode {
    EXACT = 0;
    BUILD = 1;
    SUPER = 2; // *
  }
  string lexicon = 1;
  string letters = 2;
  Mode mode = 3;
  bool expand = 4; // Whether to provide hooks, defos, ec.
}

message AnagramResponse {
  repeated Word words = 1;
  int32 num_words = 2;
}

message BlankChallengeCreateRequest {
  string lexicon = 1;
  int32 num_questions = 2;     // The number of questions to generate.
  int32 max_solutions = 3;     // The max number of solutions per question.
  int32 num_with_2_blanks = 4; // The number of questions with two blanks.
  int32 word_length = 5;
}

message BuildChallengeCreateRequest {
  string lexicon = 1;
  int32 min_solutions = 2;
  int32 max_solutions = 3;
  int32 min_length = 4;
  int32 max_length = 5;
  bool require_length_solution =
      6; // Whether a solution for the given word length is required
}

// QuestionSearcher service searches for questions (duh!)
service QuestionSearcher {
  // Search takes in a search request and returns a search response.
  // This response can be expanded or not, depending on the `expand` field
  // in SearchRequest.
  rpc Search(SearchRequest) returns (SearchResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  // Expand takes in an unexpanded search response and returns a
  // search response (fully expanded). See expandedRepr above in
  // the Alphagram field.
  rpc Expand(SearchResponse) returns (SearchResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
}

service Anagrammer {
  // Anagram does a simple anagram search; it can either be
  // build mode or regular (exact) mode.
  rpc Anagram(AnagramRequest) returns (AnagramResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // BlankChallengeCreator creates blank challenges for Aerolith
  rpc BlankChallengeCreator(BlankChallengeCreateRequest)
      returns (SearchResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // BuildChallengeCreator creates build challenges for Aerolith.
  rpc BuildChallengeCreator(BuildChallengeCreateRequest)
      returns (SearchResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message WordSearchRequest {
  string lexicon = 1;
  // the only acceptable glob characters are * and ?. These get mapped
  // to SQLITE % and _, respectively.
  string glob = 2;
  // Which field the glob applies to (word or definition?)
  string applies_to = 3;
}

message DefineRequest {
  string lexicon = 1;
  string word = 2;
}

message WordSearchResponse { repeated Word words = 1; }

// A WordSearcher is simpler than a QuestionSearcher, in that a QuestionSearcher
// will search across alphagram information and return questions,
// and a WordSearcher just cares about the individual words.
service WordSearcher {
  rpc GetWordInformation(DefineRequest) returns (WordSearchResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc WordSearch(WordSearchRequest) returns (WordSearchResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
}