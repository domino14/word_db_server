// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wordsearcher/searcher.proto

package wordsearcher

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchRequest_Condition int32

const (
	SearchRequest_LEXICON            SearchRequest_Condition = 0
	SearchRequest_LENGTH             SearchRequest_Condition = 1
	SearchRequest_PROBABILITY_RANGE  SearchRequest_Condition = 2
	SearchRequest_PROBABILITY_LIST   SearchRequest_Condition = 3
	SearchRequest_PROBABILITY_LIMIT  SearchRequest_Condition = 4
	SearchRequest_NUMBER_OF_ANAGRAMS SearchRequest_Condition = 5
	SearchRequest_NUMBER_OF_VOWELS   SearchRequest_Condition = 6
	// TAGS won't be implemented in the server, but we still want
	// to define it here because the GUI client will use it (and
	// undergo transformation into ALPHAGRAM_LIST before it hits
	// the server)
	SearchRequest_HAS_TAGS         SearchRequest_Condition = 7
	SearchRequest_POINT_VALUE      SearchRequest_Condition = 8
	SearchRequest_MATCHING_ANAGRAM SearchRequest_Condition = 9
	SearchRequest_ALPHAGRAM_LIST   SearchRequest_Condition = 10
	SearchRequest_NOT_IN_LEXICON   SearchRequest_Condition = 11
	SearchRequest_WORD_LIST        SearchRequest_Condition = 13
	// These are reserved for blank challenges. They're not even actually
	// used by this proto, but by the front end when displaying search
	// boxes.
	SearchRequest_SINGLE_VALUE_LENGTH SearchRequest_Condition = 14
	SearchRequest_NUM_TWO_BLANKS      SearchRequest_Condition = 15
	SearchRequest_MAX_SOLUTIONS       SearchRequest_Condition = 16
	// More alphagram searches
	SearchRequest_DIFFICULTY_RANGE  SearchRequest_Condition = 17
	SearchRequest_PLAYABILITY_RANGE SearchRequest_Condition = 18
	SearchRequest_DELETED_WORD      SearchRequest_Condition = 19
)

// Enum value maps for SearchRequest_Condition.
var (
	SearchRequest_Condition_name = map[int32]string{
		0:  "LEXICON",
		1:  "LENGTH",
		2:  "PROBABILITY_RANGE",
		3:  "PROBABILITY_LIST",
		4:  "PROBABILITY_LIMIT",
		5:  "NUMBER_OF_ANAGRAMS",
		6:  "NUMBER_OF_VOWELS",
		7:  "HAS_TAGS",
		8:  "POINT_VALUE",
		9:  "MATCHING_ANAGRAM",
		10: "ALPHAGRAM_LIST",
		11: "NOT_IN_LEXICON",
		13: "WORD_LIST",
		14: "SINGLE_VALUE_LENGTH",
		15: "NUM_TWO_BLANKS",
		16: "MAX_SOLUTIONS",
		17: "DIFFICULTY_RANGE",
		18: "PLAYABILITY_RANGE",
		19: "DELETED_WORD",
	}
	SearchRequest_Condition_value = map[string]int32{
		"LEXICON":             0,
		"LENGTH":              1,
		"PROBABILITY_RANGE":   2,
		"PROBABILITY_LIST":    3,
		"PROBABILITY_LIMIT":   4,
		"NUMBER_OF_ANAGRAMS":  5,
		"NUMBER_OF_VOWELS":    6,
		"HAS_TAGS":            7,
		"POINT_VALUE":         8,
		"MATCHING_ANAGRAM":    9,
		"ALPHAGRAM_LIST":      10,
		"NOT_IN_LEXICON":      11,
		"WORD_LIST":           13,
		"SINGLE_VALUE_LENGTH": 14,
		"NUM_TWO_BLANKS":      15,
		"MAX_SOLUTIONS":       16,
		"DIFFICULTY_RANGE":    17,
		"PLAYABILITY_RANGE":   18,
		"DELETED_WORD":        19,
	}
)

func (x SearchRequest_Condition) Enum() *SearchRequest_Condition {
	p := new(SearchRequest_Condition)
	*p = x
	return p
}

func (x SearchRequest_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchRequest_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_wordsearcher_searcher_proto_enumTypes[0].Descriptor()
}

func (SearchRequest_Condition) Type() protoreflect.EnumType {
	return &file_wordsearcher_searcher_proto_enumTypes[0]
}

func (x SearchRequest_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchRequest_Condition.Descriptor instead.
func (SearchRequest_Condition) EnumDescriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 0}
}

type SearchRequest_NotInLexCondition int32

const (
	SearchRequest_OTHER_ENGLISH    SearchRequest_NotInLexCondition = 0
	SearchRequest_PREVIOUS_VERSION SearchRequest_NotInLexCondition = 1
)

// Enum value maps for SearchRequest_NotInLexCondition.
var (
	SearchRequest_NotInLexCondition_name = map[int32]string{
		0: "OTHER_ENGLISH",
		1: "PREVIOUS_VERSION",
	}
	SearchRequest_NotInLexCondition_value = map[string]int32{
		"OTHER_ENGLISH":    0,
		"PREVIOUS_VERSION": 1,
	}
)

func (x SearchRequest_NotInLexCondition) Enum() *SearchRequest_NotInLexCondition {
	p := new(SearchRequest_NotInLexCondition)
	*p = x
	return p
}

func (x SearchRequest_NotInLexCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchRequest_NotInLexCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_wordsearcher_searcher_proto_enumTypes[1].Descriptor()
}

func (SearchRequest_NotInLexCondition) Type() protoreflect.EnumType {
	return &file_wordsearcher_searcher_proto_enumTypes[1]
}

func (x SearchRequest_NotInLexCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchRequest_NotInLexCondition.Descriptor instead.
func (SearchRequest_NotInLexCondition) EnumDescriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 1}
}

type AnagramRequest_Mode int32

const (
	AnagramRequest_EXACT AnagramRequest_Mode = 0
	AnagramRequest_BUILD AnagramRequest_Mode = 1
	AnagramRequest_SUPER AnagramRequest_Mode = 2 // *
)

// Enum value maps for AnagramRequest_Mode.
var (
	AnagramRequest_Mode_name = map[int32]string{
		0: "EXACT",
		1: "BUILD",
		2: "SUPER",
	}
	AnagramRequest_Mode_value = map[string]int32{
		"EXACT": 0,
		"BUILD": 1,
		"SUPER": 2,
	}
)

func (x AnagramRequest_Mode) Enum() *AnagramRequest_Mode {
	p := new(AnagramRequest_Mode)
	*p = x
	return p
}

func (x AnagramRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnagramRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_wordsearcher_searcher_proto_enumTypes[2].Descriptor()
}

func (AnagramRequest_Mode) Type() protoreflect.EnumType {
	return &file_wordsearcher_searcher_proto_enumTypes[2]
}

func (x AnagramRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnagramRequest_Mode.Descriptor instead.
func (AnagramRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{4, 0}
}

// An Alphagram encapsulates info about an alphagram, including the words,
// length, probability, combinations.
type Alphagram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alphagram string  `protobuf:"bytes,1,opt,name=alphagram,proto3" json:"alphagram,omitempty"`
	Words     []*Word `protobuf:"bytes,2,rep,name=words,proto3" json:"words,omitempty"`
	// expandedRepr is true if the length, probability, combinations are
	// included. Otherwise, this is an "unexpanded" alphagram.
	// Note that if expandedRepr is true, then the `words` field is also
	// expanded (with definition, hooks, etc).
	ExpandedRepr bool  `protobuf:"varint,3,opt,name=expandedRepr,proto3" json:"expandedRepr,omitempty"`
	Length       int32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Probability  int32 `protobuf:"varint,5,opt,name=probability,proto3" json:"probability,omitempty"`
	Combinations int64 `protobuf:"varint,6,opt,name=combinations,proto3" json:"combinations,omitempty"`
	Difficulty   int32 `protobuf:"varint,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *Alphagram) Reset() {
	*x = Alphagram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alphagram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alphagram) ProtoMessage() {}

func (x *Alphagram) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alphagram.ProtoReflect.Descriptor instead.
func (*Alphagram) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{0}
}

func (x *Alphagram) GetAlphagram() string {
	if x != nil {
		return x.Alphagram
	}
	return ""
}

func (x *Alphagram) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *Alphagram) GetExpandedRepr() bool {
	if x != nil {
		return x.ExpandedRepr
	}
	return false
}

func (x *Alphagram) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Alphagram) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *Alphagram) GetCombinations() int64 {
	if x != nil {
		return x.Combinations
	}
	return 0
}

func (x *Alphagram) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

// A Word is more than just the string representing the word. It has other
// info like the definition, hooks, lex symbols, etc.
type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word      string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Alphagram string `protobuf:"bytes,2,opt,name=alphagram,proto3" json:"alphagram,omitempty"` // Note that this alphagram is not the same as Alphagram above.
	// Note: the following fields are not filled in if the alphagram's
	// `expandedRepr` is false. Protobuf fields are optional already, but
	// this lets us be explicit.
	Definition     string `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	FrontHooks     string `protobuf:"bytes,4,opt,name=front_hooks,json=frontHooks,proto3" json:"front_hooks,omitempty"`
	BackHooks      string `protobuf:"bytes,5,opt,name=back_hooks,json=backHooks,proto3" json:"back_hooks,omitempty"`
	LexiconSymbols string `protobuf:"bytes,6,opt,name=lexicon_symbols,json=lexiconSymbols,proto3" json:"lexicon_symbols,omitempty"`
	InnerFrontHook bool   `protobuf:"varint,7,opt,name=inner_front_hook,json=innerFrontHook,proto3" json:"inner_front_hook,omitempty"`
	InnerBackHook  bool   `protobuf:"varint,8,opt,name=inner_back_hook,json=innerBackHook,proto3" json:"inner_back_hook,omitempty"`
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{1}
}

func (x *Word) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Word) GetAlphagram() string {
	if x != nil {
		return x.Alphagram
	}
	return ""
}

func (x *Word) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Word) GetFrontHooks() string {
	if x != nil {
		return x.FrontHooks
	}
	return ""
}

func (x *Word) GetBackHooks() string {
	if x != nil {
		return x.BackHooks
	}
	return ""
}

func (x *Word) GetLexiconSymbols() string {
	if x != nil {
		return x.LexiconSymbols
	}
	return ""
}

func (x *Word) GetInnerFrontHook() bool {
	if x != nil {
		return x.InnerFrontHook
	}
	return false
}

func (x *Word) GetInnerBackHook() bool {
	if x != nil {
		return x.InnerBackHook
	}
	return false
}

// A SearchRequest encapsulates a number of varied conditions and lets one
// search for questions.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Searchparams []*SearchRequest_SearchParam `protobuf:"bytes,1,rep,name=searchparams,proto3" json:"searchparams,omitempty"`
	Expand       bool                         `protobuf:"varint,2,opt,name=expand,proto3" json:"expand,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2}
}

func (x *SearchRequest) GetSearchparams() []*SearchRequest_SearchParam {
	if x != nil {
		return x.Searchparams
	}
	return nil
}

func (x *SearchRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alphagrams []*Alphagram `protobuf:"bytes,1,rep,name=alphagrams,proto3" json:"alphagrams,omitempty"`
	Lexicon    string       `protobuf:"bytes,2,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{3}
}

func (x *SearchResponse) GetAlphagrams() []*Alphagram {
	if x != nil {
		return x.Alphagrams
	}
	return nil
}

func (x *SearchResponse) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

type AnagramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string              `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Letters string              `protobuf:"bytes,2,opt,name=letters,proto3" json:"letters,omitempty"`
	Mode    AnagramRequest_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=wordsearcher.AnagramRequest_Mode" json:"mode,omitempty"`
	Expand  bool                `protobuf:"varint,4,opt,name=expand,proto3" json:"expand,omitempty"` // Whether to provide hooks, defos, ec.
}

func (x *AnagramRequest) Reset() {
	*x = AnagramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnagramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnagramRequest) ProtoMessage() {}

func (x *AnagramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnagramRequest.ProtoReflect.Descriptor instead.
func (*AnagramRequest) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{4}
}

func (x *AnagramRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *AnagramRequest) GetLetters() string {
	if x != nil {
		return x.Letters
	}
	return ""
}

func (x *AnagramRequest) GetMode() AnagramRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return AnagramRequest_EXACT
}

func (x *AnagramRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

type AnagramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Words    []*Word `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	NumWords int32   `protobuf:"varint,2,opt,name=num_words,json=numWords,proto3" json:"num_words,omitempty"`
}

func (x *AnagramResponse) Reset() {
	*x = AnagramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnagramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnagramResponse) ProtoMessage() {}

func (x *AnagramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnagramResponse.ProtoReflect.Descriptor instead.
func (*AnagramResponse) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{5}
}

func (x *AnagramResponse) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *AnagramResponse) GetNumWords() int32 {
	if x != nil {
		return x.NumWords
	}
	return 0
}

type BlankChallengeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon         string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	NumQuestions    int32  `protobuf:"varint,2,opt,name=num_questions,json=numQuestions,proto3" json:"num_questions,omitempty"`           // The number of questions to generate.
	MaxSolutions    int32  `protobuf:"varint,3,opt,name=max_solutions,json=maxSolutions,proto3" json:"max_solutions,omitempty"`           // The max number of solutions per question.
	NumWith_2Blanks int32  `protobuf:"varint,4,opt,name=num_with_2_blanks,json=numWith2Blanks,proto3" json:"num_with_2_blanks,omitempty"` // The number of questions with two blanks.
	WordLength      int32  `protobuf:"varint,5,opt,name=word_length,json=wordLength,proto3" json:"word_length,omitempty"`
}

func (x *BlankChallengeCreateRequest) Reset() {
	*x = BlankChallengeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlankChallengeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlankChallengeCreateRequest) ProtoMessage() {}

func (x *BlankChallengeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlankChallengeCreateRequest.ProtoReflect.Descriptor instead.
func (*BlankChallengeCreateRequest) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{6}
}

func (x *BlankChallengeCreateRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *BlankChallengeCreateRequest) GetNumQuestions() int32 {
	if x != nil {
		return x.NumQuestions
	}
	return 0
}

func (x *BlankChallengeCreateRequest) GetMaxSolutions() int32 {
	if x != nil {
		return x.MaxSolutions
	}
	return 0
}

func (x *BlankChallengeCreateRequest) GetNumWith_2Blanks() int32 {
	if x != nil {
		return x.NumWith_2Blanks
	}
	return 0
}

func (x *BlankChallengeCreateRequest) GetWordLength() int32 {
	if x != nil {
		return x.WordLength
	}
	return 0
}

type BuildChallengeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon               string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	MinSolutions          int32  `protobuf:"varint,2,opt,name=min_solutions,json=minSolutions,proto3" json:"min_solutions,omitempty"`
	MaxSolutions          int32  `protobuf:"varint,3,opt,name=max_solutions,json=maxSolutions,proto3" json:"max_solutions,omitempty"`
	MinLength             int32  `protobuf:"varint,4,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength             int32  `protobuf:"varint,5,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	RequireLengthSolution bool   `protobuf:"varint,6,opt,name=require_length_solution,json=requireLengthSolution,proto3" json:"require_length_solution,omitempty"` // Whether a solution for the given word length is required
}

func (x *BuildChallengeCreateRequest) Reset() {
	*x = BuildChallengeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildChallengeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildChallengeCreateRequest) ProtoMessage() {}

func (x *BuildChallengeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildChallengeCreateRequest.ProtoReflect.Descriptor instead.
func (*BuildChallengeCreateRequest) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{7}
}

func (x *BuildChallengeCreateRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *BuildChallengeCreateRequest) GetMinSolutions() int32 {
	if x != nil {
		return x.MinSolutions
	}
	return 0
}

func (x *BuildChallengeCreateRequest) GetMaxSolutions() int32 {
	if x != nil {
		return x.MaxSolutions
	}
	return 0
}

func (x *BuildChallengeCreateRequest) GetMinLength() int32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *BuildChallengeCreateRequest) GetMaxLength() int32 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *BuildChallengeCreateRequest) GetRequireLengthSolution() bool {
	if x != nil {
		return x.RequireLengthSolution
	}
	return false
}

type WordSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	// the only acceptable glob characters are * and ?. These get mapped
	// to SQLITE % and _, respectively.
	Glob string `protobuf:"bytes,2,opt,name=glob,proto3" json:"glob,omitempty"`
	// Which field the glob applies to (word or definition?)
	AppliesTo string `protobuf:"bytes,3,opt,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
}

func (x *WordSearchRequest) Reset() {
	*x = WordSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordSearchRequest) ProtoMessage() {}

func (x *WordSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordSearchRequest.ProtoReflect.Descriptor instead.
func (*WordSearchRequest) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{8}
}

func (x *WordSearchRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *WordSearchRequest) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

func (x *WordSearchRequest) GetAppliesTo() string {
	if x != nil {
		return x.AppliesTo
	}
	return ""
}

type DefineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Word    string `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
}

func (x *DefineRequest) Reset() {
	*x = DefineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineRequest) ProtoMessage() {}

func (x *DefineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineRequest.ProtoReflect.Descriptor instead.
func (*DefineRequest) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{9}
}

func (x *DefineRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *DefineRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type WordSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Words []*Word `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *WordSearchResponse) Reset() {
	*x = WordSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordSearchResponse) ProtoMessage() {}

func (x *WordSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordSearchResponse.ProtoReflect.Descriptor instead.
func (*WordSearchResponse) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{10}
}

func (x *WordSearchResponse) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

type SearchRequest_MinMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used for length, prob range, prob limit, num anagrams,
	// num_vowels, point value
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *SearchRequest_MinMax) Reset() {
	*x = SearchRequest_MinMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_MinMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_MinMax) ProtoMessage() {}

func (x *SearchRequest_MinMax) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_MinMax.ProtoReflect.Descriptor instead.
func (*SearchRequest_MinMax) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SearchRequest_MinMax) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SearchRequest_MinMax) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type SearchRequest_StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used for lexicon, matching anagram, not_in_lexicon
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchRequest_StringValue) Reset() {
	*x = SearchRequest_StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_StringValue) ProtoMessage() {}

func (x *SearchRequest_StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_StringValue.ProtoReflect.Descriptor instead.
func (*SearchRequest_StringValue) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SearchRequest_StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SearchRequest_StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used for alphagram_list
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SearchRequest_StringArray) Reset() {
	*x = SearchRequest_StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_StringArray) ProtoMessage() {}

func (x *SearchRequest_StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_StringArray.ProtoReflect.Descriptor instead.
func (*SearchRequest_StringArray) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 2}
}

func (x *SearchRequest_StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SearchRequest_NumberArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used for prob list
	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *SearchRequest_NumberArray) Reset() {
	*x = SearchRequest_NumberArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_NumberArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_NumberArray) ProtoMessage() {}

func (x *SearchRequest_NumberArray) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_NumberArray.ProtoReflect.Descriptor instead.
func (*SearchRequest_NumberArray) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 3}
}

func (x *SearchRequest_NumberArray) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type SearchRequest_NumberValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchRequest_NumberValue) Reset() {
	*x = SearchRequest_NumberValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_NumberValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_NumberValue) ProtoMessage() {}

func (x *SearchRequest_NumberValue) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_NumberValue.ProtoReflect.Descriptor instead.
func (*SearchRequest_NumberValue) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 4}
}

func (x *SearchRequest_NumberValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SearchRequest_SearchParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition SearchRequest_Condition `protobuf:"varint,1,opt,name=condition,proto3,enum=wordsearcher.SearchRequest_Condition" json:"condition,omitempty"`
	// Types that are assignable to Conditionparam:
	//
	//	*SearchRequest_SearchParam_Minmax
	//	*SearchRequest_SearchParam_Stringvalue
	//	*SearchRequest_SearchParam_Stringarray
	//	*SearchRequest_SearchParam_Numberarray
	//	*SearchRequest_SearchParam_Numbervalue
	Conditionparam isSearchRequest_SearchParam_Conditionparam `protobuf_oneof:"conditionparam"`
}

func (x *SearchRequest_SearchParam) Reset() {
	*x = SearchRequest_SearchParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wordsearcher_searcher_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_SearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_SearchParam) ProtoMessage() {}

func (x *SearchRequest_SearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_wordsearcher_searcher_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_SearchParam.ProtoReflect.Descriptor instead.
func (*SearchRequest_SearchParam) Descriptor() ([]byte, []int) {
	return file_wordsearcher_searcher_proto_rawDescGZIP(), []int{2, 5}
}

func (x *SearchRequest_SearchParam) GetCondition() SearchRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return SearchRequest_LEXICON
}

func (m *SearchRequest_SearchParam) GetConditionparam() isSearchRequest_SearchParam_Conditionparam {
	if m != nil {
		return m.Conditionparam
	}
	return nil
}

func (x *SearchRequest_SearchParam) GetMinmax() *SearchRequest_MinMax {
	if x, ok := x.GetConditionparam().(*SearchRequest_SearchParam_Minmax); ok {
		return x.Minmax
	}
	return nil
}

func (x *SearchRequest_SearchParam) GetStringvalue() *SearchRequest_StringValue {
	if x, ok := x.GetConditionparam().(*SearchRequest_SearchParam_Stringvalue); ok {
		return x.Stringvalue
	}
	return nil
}

func (x *SearchRequest_SearchParam) GetStringarray() *SearchRequest_StringArray {
	if x, ok := x.GetConditionparam().(*SearchRequest_SearchParam_Stringarray); ok {
		return x.Stringarray
	}
	return nil
}

func (x *SearchRequest_SearchParam) GetNumberarray() *SearchRequest_NumberArray {
	if x, ok := x.GetConditionparam().(*SearchRequest_SearchParam_Numberarray); ok {
		return x.Numberarray
	}
	return nil
}

func (x *SearchRequest_SearchParam) GetNumbervalue() *SearchRequest_NumberValue {
	if x, ok := x.GetConditionparam().(*SearchRequest_SearchParam_Numbervalue); ok {
		return x.Numbervalue
	}
	return nil
}

type isSearchRequest_SearchParam_Conditionparam interface {
	isSearchRequest_SearchParam_Conditionparam()
}

type SearchRequest_SearchParam_Minmax struct {
	Minmax *SearchRequest_MinMax `protobuf:"bytes,2,opt,name=minmax,proto3,oneof"`
}

type SearchRequest_SearchParam_Stringvalue struct {
	Stringvalue *SearchRequest_StringValue `protobuf:"bytes,3,opt,name=stringvalue,proto3,oneof"`
}

type SearchRequest_SearchParam_Stringarray struct {
	Stringarray *SearchRequest_StringArray `protobuf:"bytes,4,opt,name=stringarray,proto3,oneof"`
}

type SearchRequest_SearchParam_Numberarray struct {
	Numberarray *SearchRequest_NumberArray `protobuf:"bytes,5,opt,name=numberarray,proto3,oneof"`
}

type SearchRequest_SearchParam_Numbervalue struct {
	Numbervalue *SearchRequest_NumberValue `protobuf:"bytes,6,opt,name=numbervalue,proto3,oneof"`
}

func (*SearchRequest_SearchParam_Minmax) isSearchRequest_SearchParam_Conditionparam() {}

func (*SearchRequest_SearchParam_Stringvalue) isSearchRequest_SearchParam_Conditionparam() {}

func (*SearchRequest_SearchParam_Stringarray) isSearchRequest_SearchParam_Conditionparam() {}

func (*SearchRequest_SearchParam_Numberarray) isSearchRequest_SearchParam_Conditionparam() {}

func (*SearchRequest_SearchParam_Numbervalue) isSearchRequest_SearchParam_Conditionparam() {}

var File_wordsearcher_searcher_proto protoreflect.FileDescriptor

var file_wordsearcher_searcher_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0xf5, 0x01, 0x0a, 0x09,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x22, 0xdb, 0x09, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x1a, 0x2c, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0x23,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x25, 0x0a, 0x0b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x23, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd6, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x48,
	0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x4b, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x4b, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x87, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x45, 0x58, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4e, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x53,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f,
	0x56, 0x4f, 0x57, 0x45, 0x4c, 0x53, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x53, 0x5f,
	0x54, 0x41, 0x47, 0x53, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x58, 0x49,
	0x43, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x0e, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x53, 0x10,
	0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c,
	0x54, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c,
	0x41, 0x59, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x12, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x4f, 0x52,
	0x44, 0x10, 0x13, 0x22, 0x04, 0x08, 0x0c, 0x10, 0x0c, 0x22, 0x3c, 0x0a, 0x11, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x4c, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x63, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a,
	0x0e, 0x41, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x22, 0x27, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58,
	0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x50, 0x45, 0x52, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x0f, 0x41,
	0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x32, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x32, 0x42, 0x6c,
	0x61, 0x6e, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x60, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6c,
	0x6f, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54,
	0x6f, 0x22, 0x3d, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x3e, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x32, 0x9d, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x98, 0x02, 0x0a, 0x0a, 0x41, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x07, 0x41, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x42, 0x6c, 0x61, 0x6e, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb4, 0x01, 0x0a, 0x0c,
	0x57, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x57,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x57,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xaa, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x42, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x31, 0x34, 0x2f, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0xa2, 0x02, 0x03, 0x57, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0xca, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0xe2, 0x02, 0x18, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wordsearcher_searcher_proto_rawDescOnce sync.Once
	file_wordsearcher_searcher_proto_rawDescData = file_wordsearcher_searcher_proto_rawDesc
)

func file_wordsearcher_searcher_proto_rawDescGZIP() []byte {
	file_wordsearcher_searcher_proto_rawDescOnce.Do(func() {
		file_wordsearcher_searcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_wordsearcher_searcher_proto_rawDescData)
	})
	return file_wordsearcher_searcher_proto_rawDescData
}

var file_wordsearcher_searcher_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_wordsearcher_searcher_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_wordsearcher_searcher_proto_goTypes = []interface{}{
	(SearchRequest_Condition)(0),         // 0: wordsearcher.SearchRequest.Condition
	(SearchRequest_NotInLexCondition)(0), // 1: wordsearcher.SearchRequest.NotInLexCondition
	(AnagramRequest_Mode)(0),             // 2: wordsearcher.AnagramRequest.Mode
	(*Alphagram)(nil),                    // 3: wordsearcher.Alphagram
	(*Word)(nil),                         // 4: wordsearcher.Word
	(*SearchRequest)(nil),                // 5: wordsearcher.SearchRequest
	(*SearchResponse)(nil),               // 6: wordsearcher.SearchResponse
	(*AnagramRequest)(nil),               // 7: wordsearcher.AnagramRequest
	(*AnagramResponse)(nil),              // 8: wordsearcher.AnagramResponse
	(*BlankChallengeCreateRequest)(nil),  // 9: wordsearcher.BlankChallengeCreateRequest
	(*BuildChallengeCreateRequest)(nil),  // 10: wordsearcher.BuildChallengeCreateRequest
	(*WordSearchRequest)(nil),            // 11: wordsearcher.WordSearchRequest
	(*DefineRequest)(nil),                // 12: wordsearcher.DefineRequest
	(*WordSearchResponse)(nil),           // 13: wordsearcher.WordSearchResponse
	(*SearchRequest_MinMax)(nil),         // 14: wordsearcher.SearchRequest.MinMax
	(*SearchRequest_StringValue)(nil),    // 15: wordsearcher.SearchRequest.StringValue
	(*SearchRequest_StringArray)(nil),    // 16: wordsearcher.SearchRequest.StringArray
	(*SearchRequest_NumberArray)(nil),    // 17: wordsearcher.SearchRequest.NumberArray
	(*SearchRequest_NumberValue)(nil),    // 18: wordsearcher.SearchRequest.NumberValue
	(*SearchRequest_SearchParam)(nil),    // 19: wordsearcher.SearchRequest.SearchParam
}
var file_wordsearcher_searcher_proto_depIdxs = []int32{
	4,  // 0: wordsearcher.Alphagram.words:type_name -> wordsearcher.Word
	19, // 1: wordsearcher.SearchRequest.searchparams:type_name -> wordsearcher.SearchRequest.SearchParam
	3,  // 2: wordsearcher.SearchResponse.alphagrams:type_name -> wordsearcher.Alphagram
	2,  // 3: wordsearcher.AnagramRequest.mode:type_name -> wordsearcher.AnagramRequest.Mode
	4,  // 4: wordsearcher.AnagramResponse.words:type_name -> wordsearcher.Word
	4,  // 5: wordsearcher.WordSearchResponse.words:type_name -> wordsearcher.Word
	0,  // 6: wordsearcher.SearchRequest.SearchParam.condition:type_name -> wordsearcher.SearchRequest.Condition
	14, // 7: wordsearcher.SearchRequest.SearchParam.minmax:type_name -> wordsearcher.SearchRequest.MinMax
	15, // 8: wordsearcher.SearchRequest.SearchParam.stringvalue:type_name -> wordsearcher.SearchRequest.StringValue
	16, // 9: wordsearcher.SearchRequest.SearchParam.stringarray:type_name -> wordsearcher.SearchRequest.StringArray
	17, // 10: wordsearcher.SearchRequest.SearchParam.numberarray:type_name -> wordsearcher.SearchRequest.NumberArray
	18, // 11: wordsearcher.SearchRequest.SearchParam.numbervalue:type_name -> wordsearcher.SearchRequest.NumberValue
	5,  // 12: wordsearcher.QuestionSearcher.Search:input_type -> wordsearcher.SearchRequest
	6,  // 13: wordsearcher.QuestionSearcher.Expand:input_type -> wordsearcher.SearchResponse
	7,  // 14: wordsearcher.Anagrammer.Anagram:input_type -> wordsearcher.AnagramRequest
	9,  // 15: wordsearcher.Anagrammer.BlankChallengeCreator:input_type -> wordsearcher.BlankChallengeCreateRequest
	10, // 16: wordsearcher.Anagrammer.BuildChallengeCreator:input_type -> wordsearcher.BuildChallengeCreateRequest
	12, // 17: wordsearcher.WordSearcher.GetWordInformation:input_type -> wordsearcher.DefineRequest
	11, // 18: wordsearcher.WordSearcher.WordSearch:input_type -> wordsearcher.WordSearchRequest
	6,  // 19: wordsearcher.QuestionSearcher.Search:output_type -> wordsearcher.SearchResponse
	6,  // 20: wordsearcher.QuestionSearcher.Expand:output_type -> wordsearcher.SearchResponse
	8,  // 21: wordsearcher.Anagrammer.Anagram:output_type -> wordsearcher.AnagramResponse
	6,  // 22: wordsearcher.Anagrammer.BlankChallengeCreator:output_type -> wordsearcher.SearchResponse
	6,  // 23: wordsearcher.Anagrammer.BuildChallengeCreator:output_type -> wordsearcher.SearchResponse
	13, // 24: wordsearcher.WordSearcher.GetWordInformation:output_type -> wordsearcher.WordSearchResponse
	13, // 25: wordsearcher.WordSearcher.WordSearch:output_type -> wordsearcher.WordSearchResponse
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_wordsearcher_searcher_proto_init() }
func file_wordsearcher_searcher_proto_init() {
	if File_wordsearcher_searcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wordsearcher_searcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alphagram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnagramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnagramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlankChallengeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildChallengeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_MinMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_NumberArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_NumberValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wordsearcher_searcher_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_SearchParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wordsearcher_searcher_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SearchRequest_SearchParam_Minmax)(nil),
		(*SearchRequest_SearchParam_Stringvalue)(nil),
		(*SearchRequest_SearchParam_Stringarray)(nil),
		(*SearchRequest_SearchParam_Numberarray)(nil),
		(*SearchRequest_SearchParam_Numbervalue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wordsearcher_searcher_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_wordsearcher_searcher_proto_goTypes,
		DependencyIndexes: file_wordsearcher_searcher_proto_depIdxs,
		EnumInfos:         file_wordsearcher_searcher_proto_enumTypes,
		MessageInfos:      file_wordsearcher_searcher_proto_msgTypes,
	}.Build()
	File_wordsearcher_searcher_proto = out.File
	file_wordsearcher_searcher_proto_rawDesc = nil
	file_wordsearcher_searcher_proto_goTypes = nil
	file_wordsearcher_searcher_proto_depIdxs = nil
}
