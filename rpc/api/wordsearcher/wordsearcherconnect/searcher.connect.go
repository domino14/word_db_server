// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wordsearcher/searcher.proto

package wordsearcherconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	wordsearcher "github.com/domino14/word_db_server/rpc/api/wordsearcher"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QuestionSearcherName is the fully-qualified name of the QuestionSearcher service.
	QuestionSearcherName = "wordsearcher.QuestionSearcher"
	// AnagrammerName is the fully-qualified name of the Anagrammer service.
	AnagrammerName = "wordsearcher.Anagrammer"
	// WordSearcherName is the fully-qualified name of the WordSearcher service.
	WordSearcherName = "wordsearcher.WordSearcher"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QuestionSearcherSearchProcedure is the fully-qualified name of the QuestionSearcher's Search RPC.
	QuestionSearcherSearchProcedure = "/wordsearcher.QuestionSearcher/Search"
	// QuestionSearcherExpandProcedure is the fully-qualified name of the QuestionSearcher's Expand RPC.
	QuestionSearcherExpandProcedure = "/wordsearcher.QuestionSearcher/Expand"
	// AnagrammerAnagramProcedure is the fully-qualified name of the Anagrammer's Anagram RPC.
	AnagrammerAnagramProcedure = "/wordsearcher.Anagrammer/Anagram"
	// AnagrammerBlankChallengeCreatorProcedure is the fully-qualified name of the Anagrammer's
	// BlankChallengeCreator RPC.
	AnagrammerBlankChallengeCreatorProcedure = "/wordsearcher.Anagrammer/BlankChallengeCreator"
	// AnagrammerBuildChallengeCreatorProcedure is the fully-qualified name of the Anagrammer's
	// BuildChallengeCreator RPC.
	AnagrammerBuildChallengeCreatorProcedure = "/wordsearcher.Anagrammer/BuildChallengeCreator"
	// WordSearcherGetWordInformationProcedure is the fully-qualified name of the WordSearcher's
	// GetWordInformation RPC.
	WordSearcherGetWordInformationProcedure = "/wordsearcher.WordSearcher/GetWordInformation"
	// WordSearcherWordSearchProcedure is the fully-qualified name of the WordSearcher's WordSearch RPC.
	WordSearcherWordSearchProcedure = "/wordsearcher.WordSearcher/WordSearch"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	questionSearcherServiceDescriptor               = wordsearcher.File_wordsearcher_searcher_proto.Services().ByName("QuestionSearcher")
	questionSearcherSearchMethodDescriptor          = questionSearcherServiceDescriptor.Methods().ByName("Search")
	questionSearcherExpandMethodDescriptor          = questionSearcherServiceDescriptor.Methods().ByName("Expand")
	anagrammerServiceDescriptor                     = wordsearcher.File_wordsearcher_searcher_proto.Services().ByName("Anagrammer")
	anagrammerAnagramMethodDescriptor               = anagrammerServiceDescriptor.Methods().ByName("Anagram")
	anagrammerBlankChallengeCreatorMethodDescriptor = anagrammerServiceDescriptor.Methods().ByName("BlankChallengeCreator")
	anagrammerBuildChallengeCreatorMethodDescriptor = anagrammerServiceDescriptor.Methods().ByName("BuildChallengeCreator")
	wordSearcherServiceDescriptor                   = wordsearcher.File_wordsearcher_searcher_proto.Services().ByName("WordSearcher")
	wordSearcherGetWordInformationMethodDescriptor  = wordSearcherServiceDescriptor.Methods().ByName("GetWordInformation")
	wordSearcherWordSearchMethodDescriptor          = wordSearcherServiceDescriptor.Methods().ByName("WordSearch")
)

// QuestionSearcherClient is a client for the wordsearcher.QuestionSearcher service.
type QuestionSearcherClient interface {
	// Search takes in a search request and returns a search response.
	// This response can be expanded or not, depending on the `expand` field
	// in SearchRequest.
	Search(context.Context, *connect.Request[wordsearcher.SearchRequest]) (*connect.Response[wordsearcher.SearchResponse], error)
	// Expand takes in an unexpanded search response and returns a
	// search response (fully expanded). See expandedRepr above in
	// the Alphagram field.
	Expand(context.Context, *connect.Request[wordsearcher.SearchResponse]) (*connect.Response[wordsearcher.SearchResponse], error)
}

// NewQuestionSearcherClient constructs a client for the wordsearcher.QuestionSearcher service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuestionSearcherClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QuestionSearcherClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &questionSearcherClient{
		search: connect.NewClient[wordsearcher.SearchRequest, wordsearcher.SearchResponse](
			httpClient,
			baseURL+QuestionSearcherSearchProcedure,
			connect.WithSchema(questionSearcherSearchMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		expand: connect.NewClient[wordsearcher.SearchResponse, wordsearcher.SearchResponse](
			httpClient,
			baseURL+QuestionSearcherExpandProcedure,
			connect.WithSchema(questionSearcherExpandMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// questionSearcherClient implements QuestionSearcherClient.
type questionSearcherClient struct {
	search *connect.Client[wordsearcher.SearchRequest, wordsearcher.SearchResponse]
	expand *connect.Client[wordsearcher.SearchResponse, wordsearcher.SearchResponse]
}

// Search calls wordsearcher.QuestionSearcher.Search.
func (c *questionSearcherClient) Search(ctx context.Context, req *connect.Request[wordsearcher.SearchRequest]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// Expand calls wordsearcher.QuestionSearcher.Expand.
func (c *questionSearcherClient) Expand(ctx context.Context, req *connect.Request[wordsearcher.SearchResponse]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return c.expand.CallUnary(ctx, req)
}

// QuestionSearcherHandler is an implementation of the wordsearcher.QuestionSearcher service.
type QuestionSearcherHandler interface {
	// Search takes in a search request and returns a search response.
	// This response can be expanded or not, depending on the `expand` field
	// in SearchRequest.
	Search(context.Context, *connect.Request[wordsearcher.SearchRequest]) (*connect.Response[wordsearcher.SearchResponse], error)
	// Expand takes in an unexpanded search response and returns a
	// search response (fully expanded). See expandedRepr above in
	// the Alphagram field.
	Expand(context.Context, *connect.Request[wordsearcher.SearchResponse]) (*connect.Response[wordsearcher.SearchResponse], error)
}

// NewQuestionSearcherHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuestionSearcherHandler(svc QuestionSearcherHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	questionSearcherSearchHandler := connect.NewUnaryHandler(
		QuestionSearcherSearchProcedure,
		svc.Search,
		connect.WithSchema(questionSearcherSearchMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	questionSearcherExpandHandler := connect.NewUnaryHandler(
		QuestionSearcherExpandProcedure,
		svc.Expand,
		connect.WithSchema(questionSearcherExpandMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/wordsearcher.QuestionSearcher/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QuestionSearcherSearchProcedure:
			questionSearcherSearchHandler.ServeHTTP(w, r)
		case QuestionSearcherExpandProcedure:
			questionSearcherExpandHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQuestionSearcherHandler returns CodeUnimplemented from all methods.
type UnimplementedQuestionSearcherHandler struct{}

func (UnimplementedQuestionSearcherHandler) Search(context.Context, *connect.Request[wordsearcher.SearchRequest]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.QuestionSearcher.Search is not implemented"))
}

func (UnimplementedQuestionSearcherHandler) Expand(context.Context, *connect.Request[wordsearcher.SearchResponse]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.QuestionSearcher.Expand is not implemented"))
}

// AnagrammerClient is a client for the wordsearcher.Anagrammer service.
type AnagrammerClient interface {
	// Anagram does a simple anagram search; it can either be
	// build mode or regular (exact) mode.
	Anagram(context.Context, *connect.Request[wordsearcher.AnagramRequest]) (*connect.Response[wordsearcher.AnagramResponse], error)
	// BlankChallengeCreator creates blank challenges for Aerolith
	BlankChallengeCreator(context.Context, *connect.Request[wordsearcher.BlankChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error)
	// BuildChallengeCreator creates build challenges for Aerolith.
	BuildChallengeCreator(context.Context, *connect.Request[wordsearcher.BuildChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error)
}

// NewAnagrammerClient constructs a client for the wordsearcher.Anagrammer service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnagrammerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnagrammerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &anagrammerClient{
		anagram: connect.NewClient[wordsearcher.AnagramRequest, wordsearcher.AnagramResponse](
			httpClient,
			baseURL+AnagrammerAnagramProcedure,
			connect.WithSchema(anagrammerAnagramMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		blankChallengeCreator: connect.NewClient[wordsearcher.BlankChallengeCreateRequest, wordsearcher.SearchResponse](
			httpClient,
			baseURL+AnagrammerBlankChallengeCreatorProcedure,
			connect.WithSchema(anagrammerBlankChallengeCreatorMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		buildChallengeCreator: connect.NewClient[wordsearcher.BuildChallengeCreateRequest, wordsearcher.SearchResponse](
			httpClient,
			baseURL+AnagrammerBuildChallengeCreatorProcedure,
			connect.WithSchema(anagrammerBuildChallengeCreatorMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// anagrammerClient implements AnagrammerClient.
type anagrammerClient struct {
	anagram               *connect.Client[wordsearcher.AnagramRequest, wordsearcher.AnagramResponse]
	blankChallengeCreator *connect.Client[wordsearcher.BlankChallengeCreateRequest, wordsearcher.SearchResponse]
	buildChallengeCreator *connect.Client[wordsearcher.BuildChallengeCreateRequest, wordsearcher.SearchResponse]
}

// Anagram calls wordsearcher.Anagrammer.Anagram.
func (c *anagrammerClient) Anagram(ctx context.Context, req *connect.Request[wordsearcher.AnagramRequest]) (*connect.Response[wordsearcher.AnagramResponse], error) {
	return c.anagram.CallUnary(ctx, req)
}

// BlankChallengeCreator calls wordsearcher.Anagrammer.BlankChallengeCreator.
func (c *anagrammerClient) BlankChallengeCreator(ctx context.Context, req *connect.Request[wordsearcher.BlankChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return c.blankChallengeCreator.CallUnary(ctx, req)
}

// BuildChallengeCreator calls wordsearcher.Anagrammer.BuildChallengeCreator.
func (c *anagrammerClient) BuildChallengeCreator(ctx context.Context, req *connect.Request[wordsearcher.BuildChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return c.buildChallengeCreator.CallUnary(ctx, req)
}

// AnagrammerHandler is an implementation of the wordsearcher.Anagrammer service.
type AnagrammerHandler interface {
	// Anagram does a simple anagram search; it can either be
	// build mode or regular (exact) mode.
	Anagram(context.Context, *connect.Request[wordsearcher.AnagramRequest]) (*connect.Response[wordsearcher.AnagramResponse], error)
	// BlankChallengeCreator creates blank challenges for Aerolith
	BlankChallengeCreator(context.Context, *connect.Request[wordsearcher.BlankChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error)
	// BuildChallengeCreator creates build challenges for Aerolith.
	BuildChallengeCreator(context.Context, *connect.Request[wordsearcher.BuildChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error)
}

// NewAnagrammerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnagrammerHandler(svc AnagrammerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	anagrammerAnagramHandler := connect.NewUnaryHandler(
		AnagrammerAnagramProcedure,
		svc.Anagram,
		connect.WithSchema(anagrammerAnagramMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	anagrammerBlankChallengeCreatorHandler := connect.NewUnaryHandler(
		AnagrammerBlankChallengeCreatorProcedure,
		svc.BlankChallengeCreator,
		connect.WithSchema(anagrammerBlankChallengeCreatorMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	anagrammerBuildChallengeCreatorHandler := connect.NewUnaryHandler(
		AnagrammerBuildChallengeCreatorProcedure,
		svc.BuildChallengeCreator,
		connect.WithSchema(anagrammerBuildChallengeCreatorMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/wordsearcher.Anagrammer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnagrammerAnagramProcedure:
			anagrammerAnagramHandler.ServeHTTP(w, r)
		case AnagrammerBlankChallengeCreatorProcedure:
			anagrammerBlankChallengeCreatorHandler.ServeHTTP(w, r)
		case AnagrammerBuildChallengeCreatorProcedure:
			anagrammerBuildChallengeCreatorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnagrammerHandler returns CodeUnimplemented from all methods.
type UnimplementedAnagrammerHandler struct{}

func (UnimplementedAnagrammerHandler) Anagram(context.Context, *connect.Request[wordsearcher.AnagramRequest]) (*connect.Response[wordsearcher.AnagramResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.Anagrammer.Anagram is not implemented"))
}

func (UnimplementedAnagrammerHandler) BlankChallengeCreator(context.Context, *connect.Request[wordsearcher.BlankChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.Anagrammer.BlankChallengeCreator is not implemented"))
}

func (UnimplementedAnagrammerHandler) BuildChallengeCreator(context.Context, *connect.Request[wordsearcher.BuildChallengeCreateRequest]) (*connect.Response[wordsearcher.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.Anagrammer.BuildChallengeCreator is not implemented"))
}

// WordSearcherClient is a client for the wordsearcher.WordSearcher service.
type WordSearcherClient interface {
	GetWordInformation(context.Context, *connect.Request[wordsearcher.DefineRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error)
	WordSearch(context.Context, *connect.Request[wordsearcher.WordSearchRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error)
}

// NewWordSearcherClient constructs a client for the wordsearcher.WordSearcher service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWordSearcherClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WordSearcherClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wordSearcherClient{
		getWordInformation: connect.NewClient[wordsearcher.DefineRequest, wordsearcher.WordSearchResponse](
			httpClient,
			baseURL+WordSearcherGetWordInformationProcedure,
			connect.WithSchema(wordSearcherGetWordInformationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		wordSearch: connect.NewClient[wordsearcher.WordSearchRequest, wordsearcher.WordSearchResponse](
			httpClient,
			baseURL+WordSearcherWordSearchProcedure,
			connect.WithSchema(wordSearcherWordSearchMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// wordSearcherClient implements WordSearcherClient.
type wordSearcherClient struct {
	getWordInformation *connect.Client[wordsearcher.DefineRequest, wordsearcher.WordSearchResponse]
	wordSearch         *connect.Client[wordsearcher.WordSearchRequest, wordsearcher.WordSearchResponse]
}

// GetWordInformation calls wordsearcher.WordSearcher.GetWordInformation.
func (c *wordSearcherClient) GetWordInformation(ctx context.Context, req *connect.Request[wordsearcher.DefineRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error) {
	return c.getWordInformation.CallUnary(ctx, req)
}

// WordSearch calls wordsearcher.WordSearcher.WordSearch.
func (c *wordSearcherClient) WordSearch(ctx context.Context, req *connect.Request[wordsearcher.WordSearchRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error) {
	return c.wordSearch.CallUnary(ctx, req)
}

// WordSearcherHandler is an implementation of the wordsearcher.WordSearcher service.
type WordSearcherHandler interface {
	GetWordInformation(context.Context, *connect.Request[wordsearcher.DefineRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error)
	WordSearch(context.Context, *connect.Request[wordsearcher.WordSearchRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error)
}

// NewWordSearcherHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWordSearcherHandler(svc WordSearcherHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wordSearcherGetWordInformationHandler := connect.NewUnaryHandler(
		WordSearcherGetWordInformationProcedure,
		svc.GetWordInformation,
		connect.WithSchema(wordSearcherGetWordInformationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	wordSearcherWordSearchHandler := connect.NewUnaryHandler(
		WordSearcherWordSearchProcedure,
		svc.WordSearch,
		connect.WithSchema(wordSearcherWordSearchMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/wordsearcher.WordSearcher/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WordSearcherGetWordInformationProcedure:
			wordSearcherGetWordInformationHandler.ServeHTTP(w, r)
		case WordSearcherWordSearchProcedure:
			wordSearcherWordSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWordSearcherHandler returns CodeUnimplemented from all methods.
type UnimplementedWordSearcherHandler struct{}

func (UnimplementedWordSearcherHandler) GetWordInformation(context.Context, *connect.Request[wordsearcher.DefineRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.WordSearcher.GetWordInformation is not implemented"))
}

func (UnimplementedWordSearcherHandler) WordSearch(context.Context, *connect.Request[wordsearcher.WordSearchRequest]) (*connect.Response[wordsearcher.WordSearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wordsearcher.WordSearcher.WordSearch is not implemented"))
}
